// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Game from "../fool/Game.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "../utils/Utils.mjs";
import * as React from "react";
import * as Player from "../fool/Player.mjs";
import * as StackUI from "../components/StackUI.mjs";
import * as TableUI from "../components/TableUI.mjs";
import * as ClientUI from "../components/ClientUI.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as GameUtils from "../fool/GameUtils.mjs";
import * as OpponentUI from "../components/OpponentUI.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as DragLayerUI from "../components/DragLayerUI.mjs";

function useOptimisticGame(game, player, onMessage) {
  var match = React.useState(function () {
        return game;
      });
  var setOptimisticGame = match[1];
  React.useEffect((function () {
          Curry._1(setOptimisticGame, (function (param) {
                  return game;
                }));
          
        }), [game]);
  var handleOptimisticMessage = function (msg) {
    switch (msg.TAG | 0) {
      case /* Player */0 :
      case /* Lobby */1 :
          break;
      case /* Progress */2 :
          var move = msg._0;
          Curry._1(setOptimisticGame, (function (prevGame) {
                  return Belt_Result.getWithDefault(Belt_Result.flatMap(Game.dispatch(prevGame, player, move), GameUtils.unpackProgress), prevGame);
                }));
          break;
      
    }
    return Curry._1(onMessage, msg);
  };
  return [
          match[0],
          handleOptimisticMessage
        ];
}

function InProgressScreen(Props) {
  var realGame = Props.game;
  var player = Props.player;
  var onMessage = Props.onMessage;
  var match = useOptimisticGame(realGame, player, onMessage);
  var handleOptimisticMessage = match[1];
  var game = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setDraggedCard = match$1[1];
  var handleDrop = function (card) {
    Curry._1(handleOptimisticMessage, {
          TAG: /* Progress */2,
          _0: {
            TAG: /* Move */1,
            _0: card
          },
          _1: player.id,
          _2: game.gameId
        });
    
  };
  var handleBeat = function (toCard, byCard) {
    Curry._1(handleOptimisticMessage, {
          TAG: /* Progress */2,
          _0: {
            TAG: /* Beat */0,
            _0: toCard,
            _1: byCard
          },
          _1: player.id,
          _2: game.gameId
        });
    
  };
  var handleDrag = function (card) {
    return Curry._1(setDraggedCard, (function (param) {
                  return card;
                }));
  };
  var reorderedPlayers = Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.map(Belt_Option.flatMap(Utils.listIndexOf(game.players, (function (item) {
                          return Player.equals(item, player);
                        })), (function (index) {
                      return Belt_List.splitAt(game.players, index);
                    })), (function (param) {
                  return Belt_List.concat(param[1], param[0]);
                })), (function (players) {
              return Belt_List.keep(players, (function (p) {
                            return !Player.equals(p, player);
                          }));
            })), game.players);
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "flex"
                }, React.createElement("div", {
                      className: "flex m-2 flex-row"
                    }, React.createElement(StackUI.deck, {
                          deck: game.deck,
                          trump: game.trump
                        })), React.createElement("div", {
                      className: "flex m-2 w-full justify-evenly"
                    }, Utils.uiList(reorderedPlayers, (function (player) {
                            return React.createElement(OpponentUI.make, {
                                        player: player,
                                        className: "m-1 flex flex-col",
                                        isDefender: GameUtils.isDefender(game, player),
                                        isAttacker: GameUtils.isAttacker(game, player),
                                        key: player.id
                                      });
                          })))), React.createElement("div", undefined, React.createElement(DragLayerUI.make, {}), React.createElement("div", {
                      className: "m-1"
                    }, React.createElement(TableUI.make, {
                          game: game,
                          draggedCard: match$1[0],
                          player: player,
                          onDrop: handleDrop,
                          onBeat: handleBeat
                        })), React.createElement(ClientUI.make, {
                      className: "m-1 flex flex-col",
                      player: player,
                      game: game,
                      onDrag: handleDrag,
                      onMessage: handleOptimisticMessage
                    })));
}

var make = InProgressScreen;

export {
  useOptimisticGame ,
  make ,
  
}
/* Game Not a pure module */
