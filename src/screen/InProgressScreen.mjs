// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Base from "../components/Base.mjs";
import * as Card from "../fool/Card.mjs";
import * as Game from "../fool/Game.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Table from "../fool/Table.mjs";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as CardUI from "../components/CardUI.mjs";
import * as DeckUI from "../components/DeckUI.mjs";
import * as TableUI from "../components/TableUI.mjs";
import * as PlayerUI from "../components/PlayerUI.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as GameUtils from "../fool/GameUtils.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactBeautifulDnd from "react-beautiful-dnd";

function InProgressScreen$PlayerActionsUI(Props) {
  var classNameOpt = Props.className;
  var game = Props.game;
  var player = Props.player;
  var onPass = Props.onPass;
  var onTake = Props.onTake;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var isPassDisabled = !GameUtils.isCanPass(game, player);
  var isPassed = GameUtils.isPassed(game, player);
  var isTakeDisabled = !GameUtils.isCanTake(game, player);
  var isDefender = GameUtils.isDefender(game, player);
  var isDuel = Belt_List.length(Belt_List.keep(game.players, (function (player) {
              return !GameUtils.isPlayerDone(game, player);
            }))) === 2;
  return React.createElement("div", {
              className: Utils.cx([
                    "grid grid-flow-col gap-1",
                    className
                  ])
            }, isDefender ? React.createElement(Base.Button.make, {
                    disabled: isTakeDisabled,
                    onClick: onTake,
                    children: Utils.uiStr("take")
                  }) : (
                isDuel ? React.createElement(Base.Button.make, {
                        disabled: isPassDisabled,
                        onClick: onPass,
                        children: Utils.uiStr("pass")
                      }) : React.createElement(Base.Switch.make, {
                        disabled: isPassDisabled,
                        checked: isPassed,
                        onClick: onPass,
                        text: "pass"
                      })
              ));
}

var PlayerActionsUI = {
  make: InProgressScreen$PlayerActionsUI
};

function InProgressScreen$PlayerTableUI(Props) {
  var game = Props.game;
  var draggedCard = Props.draggedCard;
  var player = Props.player;
  var isDefender = GameUtils.isDefender(game, player);
  if (isDefender) {
    return React.createElement(TableUI.make, {
                className: "my-1",
                isDropDisabled: (function (toCard) {
                    if (draggedCard !== undefined) {
                      return !Card.isValidBeat(toCard, draggedCard, game.trump);
                    } else {
                      return true;
                    }
                  }),
                table: game.table
              });
  }
  var table = game.table;
  return React.createElement("div", {
              className: "flex flex-row gap-1"
            }, table ? React.createElement(TableUI.make, {
                    className: "my-1",
                    isDefender: isDefender,
                    table: table
                  }) : React.createElement("div", {
                    className: "h-16"
                  }), React.createElement(ReactBeautifulDnd.Droppable, {
                  droppableId: "table",
                  isDropDisabled: Belt_Result.isError(Belt_Result.flatMap(Utils.toResult(draggedCard, "No card"), (function (card) {
                              return Game.isValidMove(game, player, card);
                            }))),
                  children: (function (provided, snapshot) {
                      return React.createElement("div", {
                                  ref: provided.innerRef,
                                  className: Utils.cx([
                                        "w-full flex flex-row",
                                        Belt_List.length(game.table) === 0 ? "bg-pink-200" : "",
                                        snapshot.isDraggingOver ? "bg-gradient-to-tl from-purple-200 to-pink-200 opacity-70" : ""
                                      ])
                                }, provided.placeholder);
                    })
                }));
}

var PlayerTableUI = {
  make: InProgressScreen$PlayerTableUI
};

function InProgressScreen$ClientUI(Props) {
  var classNameOpt = Props.className;
  var player = Props.player;
  var game = Props.game;
  var onMessage = Props.onMessage;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var isDefender = GameUtils.isDefender(game, player);
  var isThereCardsOnTable = Table.hasCards(game.table);
  var isPlayerCanMove = GameUtils.isPlayerCanMove(game, player);
  var isDeckEnabled = isDefender ? isThereCardsOnTable : isPlayerCanMove;
  var onMove = function (move) {
    return Curry._1(onMessage, {
                TAG: /* Progress */4,
                _0: move,
                _1: player.id,
                _2: game.gameId
              });
  };
  var match = GameUtils.getPlayerGameState(game, player);
  var tmp;
  switch (match) {
    case /* Playing */0 :
        tmp = React.createElement("div", undefined, React.createElement(DeckUI.make, {
                  deck: player.cards,
                  disabled: !isDeckEnabled,
                  isDraggable: true
                }), React.createElement(InProgressScreen$PlayerActionsUI, {
                  className: "py-2",
                  game: game,
                  player: player,
                  onPass: (function (param) {
                      return onMove(/* Pass */1);
                    }),
                  onTake: (function (param) {
                      return onMove(/* Take */0);
                    })
                }));
        break;
    case /* Done */1 :
        tmp = Utils.uiStr("Done");
        break;
    case /* Lose */2 :
        tmp = Utils.uiStr("Lose");
        break;
    case /* Draw */3 :
        tmp = Utils.uiStr("Draw");
        break;
    
  }
  return React.createElement("div", {
              className: Utils.cx([
                    className,
                    "p-1 border rounded-md border-solid border-slate-500"
                  ])
            }, tmp);
}

var ClientUI = {
  make: InProgressScreen$ClientUI
};

function InProgressScreen$OpponentUI(Props) {
  var player = Props.player;
  var className = Props.className;
  var isDefender = Props.isDefender;
  var isAttacker = Props.isAttacker;
  return React.createElement("div", {
              className: Utils.cx([
                    "flex flex-col",
                    className
                  ])
            }, React.createElement("div", {
                  className: "vertial-align"
                }, React.createElement(PlayerUI.Short.make, {
                      className: "inline-block",
                      player: player
                    }), Utils.uiStr(isDefender ? " üõ°Ô∏è" : ""), Utils.uiStr(isAttacker ? " üî™" : "")), React.createElement(DeckUI.hidden, {
                  deck: player.cards
                }));
}

var OpponentUI = {
  make: InProgressScreen$OpponentUI
};

function InProgressScreen(Props) {
  var game = Props.game;
  var player = Props.player;
  var onMessage = Props.onMessage;
  var match = React.useState(function () {
        
      });
  var setDraggedCard = match[1];
  var handleDragStart = function (beforeCapture, param) {
    return Curry._1(setDraggedCard, (function (param) {
                  return Card.stringToCard(beforeCapture.draggableId);
                }));
  };
  var handleDragEnd = function (result, param) {
    var byCard = Card.stringToCard(result.draggableId);
    var dst = Belt_Option.map(Caml_option.nullable_to_opt(result.destination), (function (d) {
            return d.droppableId;
          }));
    var isTable = Belt_Option.getWithDefault(Belt_Option.map(dst, (function (dst) {
                return dst === "table";
              })), false);
    var toCard = Belt_Option.flatMap(dst, Card.stringToCard);
    if (isTable) {
      if (byCard !== undefined) {
        Curry._1(onMessage, {
              TAG: /* Progress */4,
              _0: {
                TAG: /* Move */1,
                _0: byCard
              },
              _1: player.id,
              _2: game.gameId
            });
      } else {
        console.log("unknown move");
      }
    } else if (toCard !== undefined) {
      if (byCard !== undefined) {
        Curry._1(onMessage, {
              TAG: /* Progress */4,
              _0: {
                TAG: /* Beat */0,
                _0: toCard,
                _1: byCard
              },
              _1: player.id,
              _2: game.gameId
            });
      } else {
        console.log("unknown move");
      }
    } else {
      console.log("No destination");
    }
    return Curry._1(setDraggedCard, (function (param) {
                  
                }));
  };
  var currentPlayer = Belt_Option.getExn(Belt_List.getBy(game.players, (function (p) {
              return p.id === player.id;
            })));
  var trumpCard = Utils.lastListItem(game.deck);
  return React.createElement(ReactBeautifulDnd.DragDropContext, {
              onDragStart: handleDragStart,
              onDragEnd: handleDragEnd,
              children: null
            }, React.createElement("div", {
                  className: "m-1 inline-block"
                }, trumpCard !== undefined ? (
                    trumpCard ? React.createElement("div", {
                            className: "relative"
                          }, React.createElement(DeckUI.hidden, {
                                className: "z-10",
                                deck: game.deck
                              }), React.createElement("div", {
                                className: "z-0 absolute top-1 left-10 rotate-90"
                              }, React.createElement(CardUI.VisibleCard.make, CardUI.VisibleCard.makeProps(trumpCard._0, undefined, undefined, undefined, undefined)))) : React.createElement("div", undefined, React.createElement(DeckUI.hidden, {
                                deck: game.deck
                              }), React.createElement(CardUI.trump, {
                                suit: game.trump
                              }))
                  ) : React.createElement(CardUI.EmptyCard.make, {
                        children: React.createElement(CardUI.trump, {
                              suit: game.trump
                            })
                      })), React.createElement("div", {
                  className: "flex flex-wrap"
                }, Utils.uiList(Belt_List.keep(game.players, (function (p) {
                            return !Player.equals(p, player);
                          })), (function (p) {
                        return React.createElement(InProgressScreen$OpponentUI, {
                                    player: p,
                                    className: "m-1 flex flex-col",
                                    isDefender: GameUtils.isDefender(game, p),
                                    isAttacker: GameUtils.isAttacker(game, p),
                                    key: p.id
                                  });
                      }))), React.createElement("div", {
                  className: "m-1"
                }, React.createElement(InProgressScreen$PlayerTableUI, {
                      game: game,
                      draggedCard: match[0],
                      player: player
                    })), React.createElement(InProgressScreen$ClientUI, {
                  className: "m-1 flex flex-col",
                  player: currentPlayer,
                  game: game,
                  onMessage: onMessage
                }));
}

var make = InProgressScreen;

export {
  PlayerActionsUI ,
  PlayerTableUI ,
  ClientUI ,
  OpponentUI ,
  make ,
  
}
/* Base Not a pure module */
