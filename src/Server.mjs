// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Game from "./fool/Game.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "./Utils.mjs";
import * as Player from "./fool/Player.mjs";
import * as Socket from "./Socket.mjs";
import * as GameMap from "./GameMap.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as GameUtils from "./fool/GameUtils.mjs";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Belt_MutableMap from "rescript/lib/es6/belt_MutableMap.js";

var LobbyGameMap = GameMap.MakeGameMap({});

var ProgressGameMap = GameMap.MakeGameMap({});

var gamesInLobby = Curry._1(LobbyGameMap.empty, undefined);

var gamesInProgress = Curry._1(ProgressGameMap.empty, undefined);

var author = Player.make("author");

var client = Player.make("client");

var players_1 = {
  hd: client,
  tl: /* [] */0
};

var players = {
  hd: author,
  tl: players_1
};

Belt_MutableMap.set(gamesInLobby, "GAME_ID", {
      gameId: "GAME_ID",
      players: players,
      ready: players
    });

function startGame(gameId) {
  var nextGame = Belt_Result.flatMap(get(gamesInLobby, gameId), Game.startGame);
  if (nextGame.TAG !== /* Ok */0) {
    return Socket.SServer.broadcast(gameId, {
                error: nextGame._0
              });
  }
  var game = nextGame._0;
  Belt_MutableMap.set(gamesInProgress, gameId, game);
  return Belt_List.forEach(game.players, (function (player) {
                return Socket.SServer.send(player, Game.toObject(Game.maskForPlayer(player, game)));
              }));
}

function dispatch(gameId, playerId, action) {
  var game = get$1(gamesInProgress, gameId);
  var player = Belt_Result.flatMap(game, (function (game) {
          return Utils.toResult(GameUtils.findPlayerById(game, playerId), "Player " + playerId + " not found");
        }));
  if (game.TAG !== /* Ok */0) {
    return {
            TAG: /* Error */1,
            _0: game._0
          };
  }
  if (player.TAG !== /* Ok */0) {
    return {
            TAG: /* Error */1,
            _0: player._0
          };
  }
  var player$1 = player._0;
  return Belt_Result.map(Game.dispatch(game._0, player$1, action), (function (param) {
                return Game.maskForPlayer(player$1, param);
              }));
}

startGame("GAME_ID");

export {
  LobbyGameMap ,
  ProgressGameMap ,
  gamesInLobby ,
  gamesInProgress ,
  author ,
  client ,
  players ,
  startGame ,
  dispatch ,
  
}
/* GameId Not a pure module */
