// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Game from "./fool/Game.mjs";
import * as Player from "./fool/Player.mjs";
import * as Socket from "./Socket.mjs";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Belt_MutableMap from "rescript/lib/es6/belt_MutableMap.js";

var cmp = Caml.caml_string_compare;

var GameId = Belt_Id.MakeComparable({
      cmp: cmp
    });

function empty(param) {
  return Belt_MutableMap.make(GameId);
}

var GameMap = {
  GameId: GameId,
  empty: empty
};

var games = Belt_MutableMap.make(GameId);

function startGame(gameId) {
  var nextGame = Belt_Result.flatMap(Belt_Result.flatMap(Belt_Option.getWithDefault(Belt_Option.map(Belt_MutableMap.get(games, gameId), (function (game) {
                      return {
                              TAG: /* Ok */0,
                              _0: game
                            };
                    })), {
                TAG: /* Error */1,
                _0: "game " + gameId + "not found"
              }), (function (game) {
              if (game.TAG === /* InLobby */0) {
                return {
                        TAG: /* Ok */0,
                        _0: game._0
                      };
              } else {
                return {
                        TAG: /* Error */1,
                        _0: "game already started"
                      };
              }
            })), Game.startGame);
  if (nextGame.TAG !== /* Ok */0) {
    return Socket.Server.broadcast(gameId, {
                error: nextGame._0
              });
  }
  var game = nextGame._0;
  Belt_MutableMap.set(games, gameId, {
        TAG: /* InProgress */1,
        _0: game
      });
  return Belt_List.forEach(game.players, (function (player) {
                return Socket.Server.send(player, Game.toObject(Game.maskForPlayer(player, game)));
              }));
}

function getGame(gameId) {
  return Belt_Option.getWithDefault(Belt_Option.map(Belt_MutableMap.get(games, gameId), (function (game) {
                    return {
                            TAG: /* Ok */0,
                            _0: game
                          };
                  })), {
              TAG: /* Error */1,
              _0: "Game " + gameId + " not found"
            });
}

var author = Player.make("author");

var client = Player.make("client");

var players_1 = {
  hd: client,
  tl: /* [] */0
};

var players = {
  hd: author,
  tl: players_1
};

Belt_MutableMap.set(games, "GAME_ID", {
      TAG: /* InLobby */0,
      _0: {
        gameId: "GAME_ID",
        players: players,
        ready: players
      }
    });

startGame("GAME_ID");

export {
  GameMap ,
  games ,
  startGame ,
  getGame ,
  author ,
  client ,
  players ,
  
}
/* GameId Not a pure module */
