// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Log from "./Log.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as UseWs from "./hooks/UseWs.mjs";
import * as Utils from "./Utils.mjs";
import * as React from "react";
import * as Player from "./fool/Player.mjs";
import * as PlayerUI from "./components/PlayerUI.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InLobbyScreen from "./screen/InLobbyScreen.mjs";
import * as InProgressScreen from "./screen/InProgressScreen.mjs";
import * as LobbySetupScreen from "./screen/LobbySetupScreen.mjs";
import * as AuthorizationScreen from "./screen/AuthorizationScreen.mjs";

function PlayerScreen(Props) {
  var gameIdOpt = Props.gameId;
  var sessionIdOpt = Props.sessionId;
  var gameId = gameIdOpt !== undefined ? Caml_option.valFromOption(gameIdOpt) : undefined;
  var sessionId = sessionIdOpt !== undefined ? Caml_option.valFromOption(sessionIdOpt) : undefined;
  var match = Utils.useStateValue(undefined);
  var setPlayer = match[1];
  var player = match[0];
  var match$1 = Utils.useStateValue(/* AuthorizationScreen */0);
  var setScreen = match$1[1];
  var screen = match$1[0];
  var match$2 = Utils.useStateValue(undefined);
  var setError = match$2[1];
  var error = match$2[0];
  var match$3 = Utils.useStateValue(false);
  var setIsConnected = match$3[1];
  var onMessage = React.useCallback((function (message) {
          Log.logMessageFromServer(message, player);
          Curry._1(setError, undefined);
          var exit = 0;
          switch (message.TAG | 0) {
            case /* Connected */0 :
                Curry._1(setPlayer, message._0);
                Curry._1(setScreen, /* LobbySetupScreen */1);
                return Curry._1(setIsConnected, true);
            case /* LobbyCreated */1 :
            case /* LobbyUpdated */2 :
                exit = 1;
                break;
            case /* ProgressCreated */3 :
            case /* ProgressUpdated */4 :
                exit = 2;
                break;
            case /* ServerError */5 :
                var err = message._0;
                Curry._1(setError, err);
                return Log.info([
                            "ServerError",
                            err
                          ]);
            case /* LoginError */6 :
            case /* RegisterError */7 :
                return ;
            
          }
          switch (exit) {
            case 1 :
                if (player === undefined) {
                  return ;
                }
                var game = message._0;
                Curry._1(setScreen, {
                      TAG: /* InLobbyScreen */0,
                      _0: game
                    });
                return Curry._1(setPlayer, Belt_List.getBy(game.players, (function (param) {
                                  return Player.equals(player, param);
                                })));
            case 2 :
                if (player === undefined) {
                  return ;
                }
                var game$1 = message._0;
                Curry._1(setScreen, {
                      TAG: /* InProgressScreen */1,
                      _0: game$1
                    });
                return Curry._1(setPlayer, Belt_List.getBy(game$1.players, (function (param) {
                                  return Player.equals(player, param);
                                })));
            
          }
        }), [player]);
  var handleLogin = function (player) {
    return Curry._1(setPlayer, player);
  };
  var sendMessage = UseWs.hook(player, onMessage, (function (param) {
          
        }), (function (param) {
          return Curry._1(setIsConnected, false);
        }), (function (param) {
          return Curry._1(setIsConnected, false);
        }));
  var tmp;
  var exit = 0;
  if (typeof screen === "number") {
    if (screen === /* AuthorizationScreen */0) {
      tmp = React.createElement(AuthorizationScreen.make, {
            onLogin: handleLogin,
            sessionId: sessionId
          });
    } else if (player !== undefined) {
      tmp = React.createElement(LobbySetupScreen.make, {
            player: player,
            gameId: gameId,
            onMessage: sendMessage
          });
    } else {
      exit = 1;
    }
  } else if (screen.TAG === /* InLobbyScreen */0) {
    if (player !== undefined) {
      tmp = React.createElement(InLobbyScreen.make, {
            game: screen._0,
            onMessage: sendMessage,
            player: player
          });
    } else {
      exit = 1;
    }
  } else if (player !== undefined) {
    tmp = React.createElement(InProgressScreen.make, {
          game: screen._0,
          player: player,
          onMessage: sendMessage
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = React.createElement("div", undefined, Utils.uiStr("unhandled case"));
  }
  return React.createElement("div", {
              className: "mx-auto max-w-sm w-full"
            }, player !== undefined ? React.createElement("div", undefined, Utils.uiStr("Player: "), React.createElement(PlayerUI.Short.make, {
                        className: "inline break-all",
                        player: player
                      }), React.createElement("span", {
                        className: "px-1"
                      }, Utils.uiStr(match$3[0] ? "ðŸŸ¢" : "ðŸ”´"))) : null, error !== undefined ? React.createElement("p", {
                    className: "break-all"
                  }, Utils.uiStr("ServerError: " + error)) : null, tmp);
}

var make = PlayerScreen;

export {
  make ,
  
}
/* UseWs Not a pure module */
