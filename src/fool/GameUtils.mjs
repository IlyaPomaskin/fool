// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./Card.mjs";
import * as Utils from "./Utils.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function isDefender(game, player) {
  return Caml_obj.caml_equal(game.defender, player);
}

function isAttacker(game, player) {
  return Caml_obj.caml_equal(game.attacker, player);
}

function isPlayerHasCard(player, card) {
  return Belt_List.has(player.cards, card, Utils.equals);
}

function isCorrectAdditionalCard(game, card) {
  return Belt_List.has(Card.getFlatTableCards(game.table), card, Card.isCardEqualsByRank);
}

function isTableHasCards(game) {
  return Belt_List.length(game.table) > 0;
}

function isPlayerCanMove(game, player) {
  if (isTableHasCards(game)) {
    if (Caml_obj.caml_equal(game.defender, player)) {
      return false;
    } else {
      return true;
    }
  } else {
    return Caml_obj.caml_equal(game.attacker, player);
  }
}

function toggleReady(game, player) {
  return {
          TAG: /* InLobby */0,
          _0: {
            players: Utils.toggleArrayItem(game.players, player),
            ready: game.ready
          }
        };
}

function lastListItem(list) {
  return Belt_List.get(list, Belt_List.size(list) - 1 | 0);
}

function getTrump(deck, players) {
  var lastCard = lastListItem(deck);
  var lastPlayer = lastListItem(Belt_List.keep(players, (function (p) {
              return Belt_List.length(p.cards) !== 0;
            })));
  if (lastCard !== undefined) {
    return lastCard[0];
  } else if (lastPlayer !== undefined) {
    return Belt_Option.map(lastListItem(lastPlayer.cards), (function (prim) {
                  return prim[0];
                }));
  } else {
    return ;
  }
}

function isAllTableBeaten(game) {
  var isBeaten = Belt_List.every(game.table, (function (param) {
          return Belt_Option.isSome(param[1]);
        }));
  if (isTableHasCards(game)) {
    return isBeaten;
  } else {
    return false;
  }
}

function isPlayerDone(game, player) {
  if (Card.isDeckEmpty(game.deck)) {
    return Card.isDeckEmpty(player.cards);
  } else {
    return false;
  }
}

function isCanTake(game, player) {
  if (Caml_obj.caml_equal(game.defender, player) && isTableHasCards(game)) {
    return !isAllTableBeaten(game);
  } else {
    return false;
  }
}

function isCanPass(game, player) {
  if (isTableHasCards(game)) {
    return !Caml_obj.caml_equal(game.defender, player);
  } else {
    return false;
  }
}

function isPassed(game, player) {
  var inPassedList = Belt_List.has(game.pass, player, Utils.equals);
  var hasCards = Card.isDeckEmpty(player.cards);
  if (inPassedList) {
    return true;
  } else {
    return !hasCards;
  }
}

function isAllPassed(game) {
  return Belt_List.every(game.players, (function (param) {
                return isPassed(game, param);
              }));
}

export {
  isDefender ,
  isAttacker ,
  isPlayerHasCard ,
  isCorrectAdditionalCard ,
  isTableHasCards ,
  isPlayerCanMove ,
  toggleReady ,
  lastListItem ,
  getTrump ,
  isAllTableBeaten ,
  isPlayerDone ,
  isCanTake ,
  isCanPass ,
  isPassed ,
  isAllPassed ,
  
}
/* No side effect */
