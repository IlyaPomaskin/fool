// Generated by ReScript, PLEASE EDIT WITH CARE


function isEqualsBySuit(card1, card2) {
  if (card1 && card2) {
    return card1._0[0] === card2._0[0];
  } else {
    return false;
  }
}

function isEqualsByRank(card1, card2) {
  if (card1 && card2) {
    return card1._0[1] === card2._0[1];
  } else {
    return false;
  }
}

function isEquals(card1, card2) {
  if (isEqualsBySuit(card1, card2)) {
    return isEqualsByRank(card1, card2);
  } else {
    return false;
  }
}

function ltByRank(card1, card2) {
  if (card1 && card2) {
    return card1._0[1] < card2._0[1];
  } else {
    return false;
  }
}

function gtByRank(card1, card2) {
  return !ltByRank(card1, card2);
}

function sortByRank(card1, card2) {
  if (ltByRank(card1, card2)) {
    return -1;
  } else {
    return 1;
  }
}

function isTrump(trump, card) {
  if (card) {
    return card._0[0] === trump;
  } else {
    return false;
  }
}

function getSmallest(trump, card1, card2) {
  if (card1 === undefined) {
    if (card2 !== undefined) {
      return card2;
    } else {
      return ;
    }
  }
  if (card2 === undefined) {
    return card1;
  }
  var isFstTrump = isTrump(trump, card1);
  var isSndTrump = isTrump(trump, card2);
  if (isFstTrump) {
    if (isSndTrump && !ltByRank(card1, card2)) {
      return card2;
    } else {
      return card1;
    }
  } else if (isSndTrump || !ltByRank(card1, card2)) {
    return card2;
  } else {
    return card1;
  }
}

function isBeatByTrump(to, by, trump) {
  if (isTrump(trump, to)) {
    return false;
  } else {
    return isTrump(trump, by);
  }
}

function isValidBeat(to, by, trump) {
  var match = isTrump(trump, to);
  var match$1 = isTrump(trump, by);
  if (match) {
    if (match$1) {
      return ltByRank(to, by);
    } else {
      return false;
    }
  } else if (match$1) {
    return true;
  } else if (isEqualsBySuit(to, by)) {
    return ltByRank(to, by);
  } else {
    return false;
  }
}

function suitToString(suit) {
  switch (suit) {
    case /* Spades */0 :
        return "♤";
    case /* Hearts */1 :
        return "♡";
    case /* Diamonds */2 :
        return "♢";
    case /* Clubs */3 :
        return "♧";
    
  }
}

function rankToString(rank) {
  switch (rank) {
    case /* Six */0 :
        return "6";
    case /* Seven */1 :
        return "7";
    case /* Eight */2 :
        return "8";
    case /* Nine */3 :
        return "9";
    case /* Ten */4 :
        return "10";
    case /* Jack */5 :
        return "J";
    case /* Queen */6 :
        return "Q";
    case /* King */7 :
        return "K";
    case /* Ace */8 :
        return "A";
    
  }
}

function cardToString(card) {
  if (!card) {
    return "hidden";
  }
  var match = card._0;
  return suitToString(match[0]) + " " + rankToString(match[1]);
}

export {
  isEqualsBySuit ,
  isEqualsByRank ,
  isEquals ,
  ltByRank ,
  gtByRank ,
  sortByRank ,
  isTrump ,
  getSmallest ,
  isBeatByTrump ,
  isValidBeat ,
  suitToString ,
  rankToString ,
  cardToString ,
  
}
/* No side effect */
