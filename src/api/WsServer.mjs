// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ws from "ws";
import * as Log from "../Log.mjs";
import * as Game from "../fool/Game.mjs";
import * as Jzon from "rescript-jzon/src/Jzon.mjs";
import * as MOption from "../MOption.mjs";
import * as MResult from "../MResult.mjs";
import * as $$Storage from "./Storage.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as GameUtils from "../fool/GameUtils.mjs";
import * as Serializer from "../Serializer.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as ServerUtils from "./ServerUtils.mjs";
import * as WsWebSocket from "../bindings/WsWebSocket.mjs";
import * as Belt_HashMap from "rescript/lib/es6/belt_HashMap.js";
import * as GameInstance from "./GameInstance.mjs";
import * as WsWebSocketServer from "../bindings/WsWebSocketServer.mjs";

function createServer(server) {
  var wsServer = new Ws.WebSocketServer({
        backlog: 101,
        clientTracking: true,
        maxPayload: 104857600,
        noServer: false,
        path: "/ws",
        server: server,
        skipUTF8Validation: true
      });
  var sendToWs = function (ws, $$event) {
    ws.send(Serializer.serializeServerMessage($$event));
    
  };
  var sendToPlayer = function (playerId, $$event) {
    var result = Belt_Result.map($$Storage.PlayersSocketMap.get($$Storage.playersSocket, playerId), (function (socket) {
            var tmp;
            switch ($$event.TAG | 0) {
              case /* ProgressCreated */3 :
                  tmp = {
                    TAG: /* ProgressCreated */3,
                    _0: Game.maskForPlayer($$event._0, playerId)
                  };
                  break;
              case /* ProgressUpdated */4 :
                  tmp = {
                    TAG: /* ProgressUpdated */4,
                    _0: Game.maskForPlayer($$event._0, playerId)
                  };
                  break;
              default:
                tmp = $$event;
            }
            return sendToWs(socket, tmp);
          }));
    if (result.TAG === /* Ok */0) {
      Log.info([
            "[server]",
            "sent to " + playerId + ":",
            Log.serverMsgToString($$event)
          ]);
    } else {
      Log.error([
            "[server]",
            "Unable to send to player " + playerId + ":",
            result._0
          ]);
    }
    
  };
  var broadcast = function (players, $$event) {
    return Belt_List.forEach(players, (function (player) {
                  return sendToPlayer(player.id, $$event);
                }));
  };
  wsServer.on(WsWebSocketServer.ServerEvents.connection, (function (ws, req) {
          var sessionId = MOption.toResult(Belt_Option.flatMap(ServerUtils.getParam(ServerUtils.getSearchParams(ServerUtils.getUrl(req, "ws")), "sessionId"), (function (sessionId) {
                      if (sessionId === "") {
                        return ;
                      } else {
                        return sessionId;
                      }
                    })), "No sessionId");
          Log.debug(/* Ws */0, ["login " + Belt_Result.getWithDefault(sessionId, "No sessionId")]);
          var player = Belt_Result.flatMap(sessionId, GameInstance.loginPlayer);
          if (sessionId.TAG === /* Ok */0) {
            if (player.TAG === /* Ok */0) {
              var player$1 = player._0;
              var playerId = player$1.id;
              $$Storage.PlayersSocketMap.set($$Storage.playersSocket, playerId, ws);
              sendToPlayer(playerId, {
                    TAG: /* Connected */0,
                    _0: player$1
                  });
              ws.on(WsWebSocket.ClientEvents.close, (function (param, param$1) {
                        $$Storage.PlayersSocketMap.remove($$Storage.playersSocket, playerId);
                        var game = Belt_HashMap.reduce($$Storage.games, {
                              TAG: /* Error */1,
                              _0: "Game not found"
                            }, (function (acc, key, value) {
                                if (acc.TAG === /* Ok */0 || playerId !== key) {
                                  return acc;
                                } else {
                                  return {
                                          TAG: /* Ok */0,
                                          _0: value
                                        };
                                }
                              }));
                        Belt_Result.map(Belt_Result.flatMap(Belt_Result.flatMap(game, (function (game) {
                                        return GameInstance.leaveGame(playerId, GameUtils.getGameId(game));
                                      })), (function (game) {
                                    return $$Storage.GameMap.set($$Storage.games, GameUtils.getGameId(game), game);
                                  })), (function (game) {
                                if (game.TAG === /* InLobby */0) {
                                  var g = game._0;
                                  return broadcast(g.players, {
                                              TAG: /* LobbyUpdated */2,
                                              _0: g
                                            });
                                }
                                var g$1 = game._0;
                                return broadcast(g$1.players, {
                                            TAG: /* ProgressUpdated */4,
                                            _0: g$1
                                          });
                              }));
                        
                      })).on(WsWebSocket.ClientEvents.message, (function (msg, param) {
                      var ws = this ;
                      MResult.tapError(MResult.tapError(Belt_Result.flatMap(MResult.mapError(MResult.tap(Serializer.deserializeClientMessage(Belt_Option.getWithDefault(WsWebSocket.RawData.toString(msg), "")), Log.logMessageFromClient), Jzon.DecodingError.toString), (function (msg) {
                                      switch (msg.TAG | 0) {
                                        case /* Player */0 :
                                            return {
                                                    TAG: /* Error */1,
                                                    _0: "Unknown message from client"
                                                  };
                                        case /* Lobby */1 :
                                            switch (msg._0) {
                                              case /* Create */0 :
                                                  return Belt_Result.map(Belt_Result.flatMap(GameInstance.createLobby(msg._1), GameUtils.unpackLobby), (function (lobby) {
                                                                return broadcast(lobby.players, {
                                                                            TAG: /* LobbyCreated */1,
                                                                            _0: lobby
                                                                          });
                                                              }));
                                              case /* Enter */1 :
                                                  return Belt_Result.map(GameInstance.enterGame(msg._1, msg._2), (function (game) {
                                                                if (game.TAG === /* InLobby */0) {
                                                                  var lobby = game._0;
                                                                  return broadcast(lobby.players, {
                                                                              TAG: /* LobbyUpdated */2,
                                                                              _0: lobby
                                                                            });
                                                                }
                                                                var progress = game._0;
                                                                return broadcast(progress.players, {
                                                                            TAG: /* ProgressUpdated */4,
                                                                            _0: progress
                                                                          });
                                                              }));
                                              case /* Ready */2 :
                                                  return Belt_Result.map(Belt_Result.flatMap(GameInstance.toggleReady(msg._1, msg._2), GameUtils.unpackLobby), (function (lobby) {
                                                                return broadcast(lobby.players, {
                                                                            TAG: /* LobbyUpdated */2,
                                                                            _0: lobby
                                                                          });
                                                              }));
                                              case /* Start */3 :
                                                  return Belt_Result.map(Belt_Result.flatMap(GameInstance.startGame(msg._1, msg._2), GameUtils.unpackProgress), (function (progress) {
                                                                return broadcast(progress.players, {
                                                                            TAG: /* ProgressCreated */3,
                                                                            _0: progress
                                                                          });
                                                              }));
                                              
                                            }
                                        case /* Progress */2 :
                                            return Belt_Result.map(Belt_Result.flatMap(GameInstance.move(msg._1, msg._2, msg._0), GameUtils.unpackProgress), (function (progress) {
                                                          return broadcast(progress.players, {
                                                                      TAG: /* ProgressUpdated */4,
                                                                      _0: progress
                                                                    });
                                                        }));
                                        
                                      }
                                    })), (function (err) {
                                  return Log.error([
                                              "Server error:",
                                              err
                                            ]);
                                })), (function (msg) {
                              return sendToWs(ws, {
                                          TAG: /* ServerError */5,
                                          _0: msg
                                        });
                            }));
                      
                    }));
              return ;
            }
            Log.error([
                  "Player not found error:",
                  player._0
                ]);
            ws.close();
            return ;
          }
          Log.error([
                "Can't get sessionId error:",
                sessionId._0
              ]);
          ws.close();
          
        }));
  
}

var isWsServerSet = {
  contents: false
};

function setWsServer(res) {
  if (!isWsServerSet.contents) {
    isWsServerSet.contents = true;
    return createServer(res.socket.server);
  }
  
}

export {
  createServer ,
  isWsServerSet ,
  setWsServer ,
  
}
/* ws Not a pure module */
