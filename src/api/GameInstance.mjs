// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Log from "../Log.mjs";
import * as Game from "../fool/Game.mjs";
import * as $$Storage from "./Storage.mjs";
import * as GameUtils from "../fool/GameUtils.mjs";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";

var p1 = {
  id: "p1",
  sessionId: "s:p1",
  cards: /* [] */0
};

var p2 = {
  id: "p2",
  sessionId: "s:p2",
  cards: /* [] */0
};

$$Storage.PlayersMap.set($$Storage.players, "p1", p1);

$$Storage.PlayersMap.set($$Storage.players, "p2", p2);

$$Storage.GameMap.set($$Storage.games, "g1", {
      TAG: /* InLobby */0,
      _0: {
        owner: "p1",
        gameId: "g1",
        players: {
          hd: p1,
          tl: {
            hd: p2,
            tl: /* [] */0
          }
        },
        ready: {
          hd: "p1",
          tl: {
            hd: "p2",
            tl: /* [] */0
          }
        }
      }
    });

function registerPlayer(playerId) {
  var player = $$Storage.PlayersMap.get($$Storage.players, playerId);
  if (player.TAG === /* Ok */0) {
    return {
            TAG: /* Error */1,
            _0: "Player with same name already exists"
          };
  } else {
    return $$Storage.PlayersMap.create($$Storage.players, playerId);
  }
}

var instanceId = {
  contents: 0
};

function loginPlayer(sessionId) {
  if (instanceId.contents === 0) {
    instanceId.contents = Math.random();
  }
  Log.debug(/* LoginPlayer */2, [
        "GameInstance",
        Pervasives.string_of_float(instanceId.contents)
      ]);
  return $$Storage.PlayersMap.findBySessionId($$Storage.players, sessionId);
}

function getPlayerWithGame(playerId, gameId, unpackGame) {
  return Belt_Result.flatMap($$Storage.PlayersMap.get($$Storage.players, playerId), (function (player) {
                return Belt_Result.map(Belt_Result.flatMap($$Storage.GameMap.get($$Storage.games, gameId), unpackGame), (function (game) {
                              return [
                                      game,
                                      player
                                    ];
                            }));
              }));
}

function createLobby(playerId) {
  return Belt_Result.flatMap(Belt_Result.flatMap($$Storage.PlayersMap.get($$Storage.players, playerId), Game.makeGameInLobby), (function (game) {
                return $$Storage.GameMap.create($$Storage.games, game);
              }));
}

function enterGame(playerId, gameId) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, GameUtils.unpackLobby), (function (param) {
                    return Game.enterLobby(param[0], param[1]);
                  })), (function (lobby) {
                return $$Storage.GameMap.set($$Storage.games, gameId, lobby);
              }));
}

function toggleReady(playerId, gameId) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, GameUtils.unpackLobby), (function (param) {
                    return Game.toggleReady(param[0], param[1]);
                  })), (function (game) {
                return $$Storage.GameMap.set($$Storage.games, gameId, game);
              }));
}

function startGame(playerId, gameId) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, GameUtils.unpackLobby), (function (param) {
                    return Game.startGame(param[0], param[1]);
                  })), (function (game) {
                return $$Storage.GameMap.set($$Storage.games, gameId, game);
              }));
}

function move(playerId, gameId, action) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, GameUtils.unpackProgress), (function (param) {
                    return Game.dispatch(param[0], param[1], action);
                  })), (function (game) {
                return $$Storage.GameMap.set($$Storage.games, gameId, game);
              }));
}

export {
  p1 ,
  p2 ,
  registerPlayer ,
  instanceId ,
  loginPlayer ,
  getPlayerWithGame ,
  createLobby ,
  enterGame ,
  toggleReady ,
  startGame ,
  move ,
  
}
/*  Not a pure module */
