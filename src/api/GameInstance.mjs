// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Game from "../fool/Game.mjs";
import * as MResult from "../MResult.mjs";
import * as $$Storage from "./Storage.mjs";
import * as GameUtils from "../fool/GameUtils.mjs";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";

function registerPlayer(playerId) {
  var player = $$Storage.PlayersMap.get($$Storage.players, playerId);
  if (player.TAG === /* Ok */0) {
    return {
            TAG: /* Error */1,
            _0: "Player with same name already exists"
          };
  } else {
    return $$Storage.PlayersMap.create($$Storage.players, playerId);
  }
}

function loginPlayer(sessionId) {
  return $$Storage.PlayersMap.findBySessionId($$Storage.players, sessionId);
}

function getPlayerWithGame(playerId, gameId, unpackGame) {
  return Belt_Result.flatMap($$Storage.PlayersMap.get($$Storage.players, playerId), (function (player) {
                return Belt_Result.map(Belt_Result.flatMap($$Storage.GameMap.get($$Storage.games, gameId), unpackGame), (function (game) {
                              return [
                                      game,
                                      player
                                    ];
                            }));
              }));
}

function createLobby(playerId) {
  return Belt_Result.flatMap(Belt_Result.flatMap($$Storage.PlayersMap.get($$Storage.players, playerId), Game.makeGameInLobby), (function (game) {
                return $$Storage.GameMap.create($$Storage.games, game);
              }));
}

function enterGame(playerId, gameId) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, (function (g) {
                        return {
                                TAG: /* Ok */0,
                                _0: g
                              };
                      })), (function (param) {
                    var player = param[1];
                    var game = param[0];
                    if (game.TAG === /* InLobby */0) {
                      return Game.enterLobby(game._0, player);
                    } else {
                      return Game.enterProgress(game._0, player);
                    }
                  })), (function (lobby) {
                return $$Storage.GameMap.set($$Storage.games, gameId, lobby);
              }));
}

function leaveGame(playerId, gameId) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, (function (g) {
                        return {
                                TAG: /* Ok */0,
                                _0: g
                              };
                      })), (function (param) {
                    var player = param[1];
                    var game = param[0];
                    if (game.TAG === /* InLobby */0) {
                      return Game.leaveLobby(game._0, player);
                    } else {
                      return Game.disconnectProgress(game._0, player);
                    }
                  })), (function (lobby) {
                return $$Storage.GameMap.set($$Storage.games, gameId, lobby);
              }));
}

function toggleReady(playerId, gameId) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, GameUtils.unpackLobby), (function (param) {
                    return Game.toggleReady(param[0], param[1]);
                  })), (function (game) {
                return $$Storage.GameMap.set($$Storage.games, gameId, game);
              }));
}

function startGame(playerId, gameId) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, GameUtils.unpackLobby), (function (param) {
                    return Game.startGame(param[0], param[1]);
                  })), (function (game) {
                return $$Storage.GameMap.set($$Storage.games, gameId, game);
              }));
}

function move(playerId, gameId, action) {
  return Belt_Result.flatMap(Belt_Result.flatMap(getPlayerWithGame(playerId, gameId, GameUtils.unpackProgress), (function (param) {
                    return Game.dispatch(param[0], param[1], action);
                  })), (function (game) {
                return $$Storage.GameMap.set($$Storage.games, gameId, game);
              }));
}

var p1 = {
  id: "p1",
  sessionId: "s:p1",
  cards: /* [] */0
};

var p2 = {
  id: "p2",
  sessionId: "s:p2",
  cards: /* [] */0
};

$$Storage.PlayersMap.set($$Storage.players, "p1", p1);

$$Storage.PlayersMap.set($$Storage.players, "p2", p2);

Belt_Result.map($$Storage.GameMap.set($$Storage.games, "g1", {
          TAG: /* InLobby */0,
          _0: {
            owner: "p1",
            gameId: "g1",
            players: {
              hd: p1,
              tl: {
                hd: p2,
                tl: /* [] */0
              }
            },
            ready: {
              hd: "p1",
              tl: {
                hd: "p2",
                tl: /* [] */0
              }
            }
          }
        }), (function (game) {
        MResult.fold(startGame("p2", "g1"), (function (r) {
                console.log("ok", r);
                
              }), (function (e) {
                console.log("err", e);
                
              }));
        return game;
      }));

export {
  registerPlayer ,
  loginPlayer ,
  getPlayerWithGame ,
  createLobby ,
  enterGame ,
  leaveGame ,
  toggleReady ,
  startGame ,
  move ,
  p1 ,
  p2 ,
  
}
/*  Not a pure module */
