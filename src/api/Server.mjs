// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ws from "ws";
import * as Serializer from "../Serializer.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as WsWebSocket from "../bindings/WsWebSocket.mjs";
import * as GameInstance from "./GameInstance.mjs";
import * as WsWebSocketServer from "../bindings/WsWebSocketServer.mjs";

var wsServer = new Ws.WebSocketServer({
      backlog: 101,
      clientTracking: true,
      maxPayload: 104857600,
      noServer: false,
      path: "/ws",
      server: restartServer(),
      skipUTF8Validation: true
    });

wsServer.on(WsWebSocketServer.ServerEvents.connection, (function (ws, param) {
        ws.on(WsWebSocket.ClientEvents.open_, (function () {
                    var client = this ;
                    console.log("connection open");
                    client.send("connected");
                    
                  })).on(WsWebSocket.ClientEvents.message, (function (msg, param) {
                  var ws = this ;
                  var msg$1 = Serializer.deserializeClientMessage(Belt_Option.getWithDefault(WsWebSocket.RawData.toString(msg), ""));
                  var tmp;
                  if (msg$1.TAG === /* Ok */0) {
                    var match = msg$1._0;
                    switch (match.TAG | 0) {
                      case /* Player */0 :
                          var pId = match._1;
                          var tmp$1;
                          switch (match._0) {
                            case /* Connect */0 :
                                tmp$1 = "connect " + pId;
                                break;
                            case /* Disconnect */1 :
                                tmp$1 = "disconnect " + pId;
                                break;
                            case /* Ping */2 :
                                tmp$1 = "ping " + pId;
                                break;
                            case /* Pong */3 :
                                tmp$1 = "pong " + pId;
                                break;
                            
                          }
                          tmp = "player: " + tmp$1;
                          break;
                      case /* Lobby */1 :
                          var gId = match._2;
                          var pId$1 = match._1;
                          var tmp$2;
                          switch (match._0) {
                            case /* Create */0 :
                                tmp$2 = "Create " + pId$1 + " " + gId;
                                break;
                            case /* Enter */1 :
                                tmp$2 = "Enter " + pId$1 + " " + gId;
                                break;
                            case /* Ready */2 :
                                tmp$2 = "Ready " + pId$1 + " " + gId;
                                break;
                            case /* Start */3 :
                                tmp$2 = "Start " + pId$1 + " " + gId;
                                break;
                            
                          }
                          tmp = "game: " + tmp$2;
                          break;
                      case /* Progress */2 :
                          tmp = "unk";
                          break;
                      
                    }
                  } else {
                    tmp = "unk";
                  }
                  console.log("msg:", tmp);
                  if (msg$1.TAG === /* Ok */0) {
                    var match$1 = msg$1._0;
                    switch (match$1.TAG | 0) {
                      case /* Player */0 :
                          if (match$1._0 !== 0) {
                            
                          } else {
                            Belt_Result.map(GameInstance.createPlayer(match$1._1), (function (player) {
                                    ws.send(Serializer.serializeServerMessage({
                                              TAG: /* Connected */0,
                                              _0: player
                                            }));
                                    
                                  }));
                          }
                          break;
                      case /* Lobby */1 :
                          switch (match$1._0) {
                            case /* Create */0 :
                                Belt_Result.map(GameInstance.createLobby(match$1._1), (function (lobby) {
                                        ws.send(Serializer.serializeServerMessage({
                                                  TAG: /* LobbyUpdated */2,
                                                  _0: lobby
                                                }));
                                        
                                      }));
                                break;
                            case /* Enter */1 :
                                Belt_Result.map(GameInstance.enterGame(match$1._1, match$1._2), (function (lobby) {
                                        ws.send(Serializer.serializeServerMessage({
                                                  TAG: /* LobbyUpdated */2,
                                                  _0: lobby
                                                }));
                                        
                                      }));
                                break;
                            case /* Ready */2 :
                                Belt_Result.map(GameInstance.toggleReady(match$1._1, match$1._2), (function (lobby) {
                                        ws.send(Serializer.serializeServerMessage({
                                                  TAG: /* LobbyUpdated */2,
                                                  _0: lobby
                                                }));
                                        
                                      }));
                                break;
                            case /* Start */3 :
                                Belt_Result.map(GameInstance.startGame(match$1._1, match$1._2), (function (progress) {
                                        ws.send(Serializer.serializeServerMessage({
                                                  TAG: /* ProgressCreated */3,
                                                  _0: progress
                                                }));
                                        
                                      }));
                                break;
                            
                          }
                          break;
                      case /* Progress */2 :
                          Belt_Result.map(GameInstance.dispatch(match$1._1, match$1._2, match$1._0), (function (progress) {
                                  ws.send(Serializer.serializeServerMessage({
                                            TAG: /* ProgressUpdated */4,
                                            _0: progress
                                          }));
                                  
                                }));
                          break;
                      
                    }
                  }
                  ws.send(Serializer.serializeServerMessage({
                            TAG: /* Err */5,
                            _0: "some error"
                          }));
                  
                })).on(WsWebSocket.ClientEvents.close, (function (param, param$1) {
                console.log("connection close");
                
              }));
        
      }));

function $$default(param, res) {
  res.end(Buffer.from("response"));
  
}

export {
  $$default ,
  $$default as default,
  
}
/* wsServer Not a pure module */
