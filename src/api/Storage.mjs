// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Log from "../Log.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Player from "../fool/Player.mjs";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Hashtbl from "rescript/lib/es6/hashtbl.js";
import * as MOption from "../MOption.mjs";
import * as GameUtils from "../fool/GameUtils.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Belt_HashMap from "rescript/lib/es6/belt_HashMap.js";

function eq(a, b) {
  return a === b;
}

var PlayerId = Belt_Id.MakeHashable({
      hash: Hashtbl.hash,
      eq: eq
    });

function eq$1(a, b) {
  return a === b;
}

var GameId = Belt_Id.MakeHashable({
      hash: Hashtbl.hash,
      eq: eq$1
    });

function empty(param) {
  return Belt_HashMap.make(10, GameId);
}

function get(map, gameId) {
  return MOption.toResult(Belt_HashMap.get(map, gameId), "Game \"" + gameId + "\" not found");
}

function set(map, gameId, game) {
  Belt_HashMap.set(map, gameId, game);
  return {
          TAG: /* Ok */0,
          _0: game
        };
}

function create(map, game) {
  var gameWithSameIdFound = get(map, GameUtils.getGameId(game));
  if (gameWithSameIdFound.TAG === /* Ok */0) {
    return {
            TAG: /* Error */1,
            _0: "Game " + GameUtils.getGameId(gameWithSameIdFound._0) + " already exists"
          };
  } else {
    return set(map, GameUtils.getGameId(game), game);
  }
}

var remove = Belt_HashMap.remove;

function update(map, gameId, fn) {
  return Belt_Result.flatMap(get(map, gameId), (function (game) {
                return set(map, gameId, Curry._1(fn, game));
              }));
}

var GameMap = {
  empty: empty,
  get: get,
  set: set,
  create: create,
  remove: remove,
  update: update
};

function log(map) {
  return JSON.stringify(Belt_Array.map(Belt_HashMap.toArray(map), (function (param) {
                    return [
                            param[0],
                            param[1]
                          ];
                  })), null, 2);
}

function empty$1(param) {
  return Belt_HashMap.make(10, PlayerId);
}

function get$1(map, playerId) {
  return MOption.toResult(Belt_HashMap.get(map, playerId), "Player \"" + playerId + "\" not found");
}

function findBySessionId(map, sessionId) {
  Log.debug(/* PlayersMap */3, [
        "findBySessionId",
        log(map)
      ]);
  return MOption.toResult(Belt_HashMap.reduce(map, undefined, (function (acc, param, value) {
                    if (acc !== undefined) {
                      return acc;
                    } else if (value.sessionId === sessionId) {
                      return value;
                    } else {
                      return ;
                    }
                  })), "Player " + sessionId + " not found");
}

function set$1(map, key, nextValue) {
  Belt_HashMap.set(map, key, nextValue);
  return Log.debug(/* PlayersMap */3, [
              "set",
              key,
              log(map)
            ]);
}

function create$1(map, playerId) {
  var match = Belt_HashMap.get(map, playerId);
  if (match !== undefined) {
    return {
            TAG: /* Error */1,
            _0: "Player " + playerId + " already exists"
          };
  }
  var player = Player.make(playerId);
  set$1(map, playerId, player);
  return {
          TAG: /* Ok */0,
          _0: player
        };
}

var PlayersMap = {
  log: log,
  empty: empty$1,
  get: get$1,
  findBySessionId: findBySessionId,
  set: set$1,
  create: create$1
};

function empty$2(param) {
  return Belt_HashMap.make(10, PlayerId);
}

function get$2(map, playerId) {
  return MOption.toResult(Belt_HashMap.get(map, playerId), "Player \"" + playerId + "\" socket not found");
}

var set$2 = Belt_HashMap.set;

var remove$1 = Belt_HashMap.remove;

var PlayersSocketMap = {
  empty: empty$2,
  get: get$2,
  set: set$2,
  remove: remove$1
};

var games = Belt_HashMap.make(10, GameId);

var players = Belt_HashMap.make(10, PlayerId);

export {
  PlayerId ,
  GameId ,
  GameMap ,
  PlayersMap ,
  PlayersSocketMap ,
  games ,
  players ,
  
}
/* PlayerId Not a pure module */
