// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../fool/Card.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as CardUI from "./CardUI.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactBeautifulDnd from "react-beautiful-dnd";

var spread3 = ((x1,x2,x3) => ({ ...x1, ...x2, ...x3 }));

function getDropAnimation(style, snapshot) {
  var dropAnimation = snapshot.dropAnimation;
  var transform = (dropAnimation == null) ? Belt_Option.getWithDefault(Caml_option.nullable_to_opt(style.transform), "") : "translate(" + String(dropAnimation.moveTo.x) + "px, " + String(dropAnimation.moveTo.y) + "px)";
  var transform$1 = transform + " rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))";
  return Object.assign({}, style, {
              transform: transform$1
            });
}

function getAnimationClassNames(snapshot) {
  var dropAnimation = snapshot.dropAnimation;
  var match = snapshot.isDragging;
  var match$1 = snapshot.isDropAnimating;
  if (match$1) {
    if (dropAnimation == null) {
      if (match) {
        return "rotate-12 translate-x-1.5 scale-125";
      } else {
        return "scale-100";
      }
    } else {
      return "rotate-12 translate-x-1.5 scale-100";
    }
  } else if (match) {
    return "rotate-12 translate-x-1.5 scale-125";
  } else {
    return "scale-100";
  }
}

function DeckUI$DndWrapper(Props) {
  var card = Props.card;
  var index = Props.index;
  var children = Props.children;
  var id = Card.cardToString(card);
  return React.createElement(ReactBeautifulDnd.Droppable, {
              droppableId: id,
              isDropDisabled: true,
              direction: "horizontal",
              children: (function (droppableProvided, param) {
                  return React.createElement("div", {
                              ref: droppableProvided.innerRef
                            }, React.createElement(ReactBeautifulDnd.Draggable, {
                                  draggableId: id,
                                  index: index,
                                  children: (function (provided, snapshot, param) {
                                      return React.cloneElement(React.createElement("div", {
                                                      ref: provided.innerRef
                                                    }, children), spread3(provided.draggableProps, provided.dragHandleProps, {
                                                      className: Utils.cx([
                                                            "transition duration-150 ease-in-out",
                                                            getAnimationClassNames(snapshot)
                                                          ]),
                                                      style: getDropAnimation(provided.draggableProps.style, snapshot)
                                                    }));
                                    })
                                }), droppableProvided.placeholder);
                })
            });
}

var DndWrapper = {
  make: DeckUI$DndWrapper
};

function DeckUI$hidden(Props) {
  var deck = Props.deck;
  var text = Props.text;
  var cardsAmount = Belt_List.length(deck);
  var cardsList = Belt_List.mapWithIndex(Belt_List.keepWithIndex(deck, (function (param, index) {
              return index <= 2;
            })), (function (index, param) {
          return index;
        }));
  var deckText = text !== undefined ? Caml_option.valFromOption(text) : (
      cardsAmount !== 0 ? Utils.uiStr(String(cardsAmount)) : Utils.uiStr("0")
    );
  return React.createElement("div", {
              className: "relative"
            }, cardsAmount !== 0 ? Utils.uiList(cardsList, (function (index) {
                      var offset = String((index << 1)) + "px";
                      return React.createElement("div", {
                                  key: String(index),
                                  className: index === 0 ? "relative" : "absolute",
                                  style: {
                                    left: offset,
                                    top: offset
                                  }
                                }, React.createElement(CardUI.HiddenCard.make, {}));
                    })) : React.createElement(CardUI.EmptyCard.make, {}), React.createElement("div", {
                  className: "absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 text-slate-200"
                }, deckText));
}

function DeckUI(Props) {
  var deck = Props.deck;
  var classNameOpt = Props.className;
  var disabledOpt = Props.disabled;
  var isDraggableOpt = Props.isDraggable;
  var isCardDisabledOpt = Props.isCardDisabled;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var isDraggable = isDraggableOpt !== undefined ? isDraggableOpt : false;
  var isCardDisabled = isCardDisabledOpt !== undefined ? isCardDisabledOpt : (function (param) {
        return false;
      });
  if (deck) {
    return React.createElement("div", {
                className: Utils.cx([
                      className,
                      "leading flex flex-row gap-1"
                    ])
              }, Utils.uiListWithIndex(deck, (function (index, card) {
                      var key = Card.cardToString(card) + String(index);
                      var disabled$1 = disabled || Curry._1(isCardDisabled, card);
                      if (isDraggable) {
                        return React.createElement(DeckUI$DndWrapper, {
                                    card: card,
                                    index: index,
                                    children: React.createElement(CardUI.make, {
                                          card: card,
                                          disabled: disabled$1
                                        }),
                                    key: key
                                  });
                      } else {
                        return React.createElement(CardUI.make, {
                                    card: card,
                                    disabled: disabled$1,
                                    key: key
                                  });
                      }
                    })));
  } else {
    return React.createElement("div", {
                className: className
              }, Utils.uiStr("No cards in deck"));
  }
}

var hidden = DeckUI$hidden;

var make = DeckUI;

export {
  spread3 ,
  getDropAnimation ,
  getAnimationClassNames ,
  DndWrapper ,
  hidden ,
  make ,
  
}
/* react Not a pure module */
