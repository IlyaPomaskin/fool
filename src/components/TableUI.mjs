// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../fool/Card.mjs";
import * as Game from "../fool/Game.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "../utils/Utils.mjs";
import * as React from "react";
import * as CardUI from "./CardUI.mjs";
import * as Spring from "bs-react-spring/src/Spring.mjs";
import * as MOption from "../utils/MOption.mjs";
import * as ReactDnd from "../bindings/ReactDnd.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as GameUtils from "../fool/GameUtils.mjs";
import * as ReactDnd$1 from "react-dnd";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as ReactSpring from "react-spring";

var DragObject = {};

var EmptyDropResult = {};

var CollectedProps = {};

var include = ReactDnd.MakeUseDrop(DragObject, EmptyDropResult, CollectedProps);

function TableUI$DndBeatableCard(Props) {
  var card = Props.card;
  var canDrop = Props.canDrop;
  var onDrop = Props.onDrop;
  var canDrop$1 = Curry._1(canDrop, card);
  var match = ReactDnd$1.useDrop({
        accept: "card",
        drop: (function (item, param) {
            return Curry._2(onDrop, card, item);
          }),
        canDrop: (function (param, param$1) {
            return canDrop$1;
          }),
        collect: (function (monitor) {
            return {
                    isOverCurrent: monitor.isOver({
                          shallow: true
                        })
                  };
          })
      }, [
        Utils.any(onDrop),
        Utils.any(card),
        Utils.any(canDrop$1)
      ]);
  return React.createElement("div", {
              ref: match[1],
              className: Utils.cx(["w-12 h-16"])
            }, React.createElement(CardUI.EmptyCard.make, {
                  className: Utils.cx([
                        match[0].isOverCurrent && canDrop$1 ? "bg-pink-500 opacity-70" : "",
                        "border-dashed"
                      ])
                }));
}

var DndBeatableCard_DropTargetMonitor = include.DropTargetMonitor;

var DndBeatableCard_UseDrop = include.UseDrop;

var DndBeatableCard = {
  DragObject: DragObject,
  EmptyDropResult: EmptyDropResult,
  CollectedProps: CollectedProps,
  DropTargetMonitor: DndBeatableCard_DropTargetMonitor,
  UseDrop: DndBeatableCard_UseDrop,
  make: TableUI$DndBeatableCard
};

var CardTransition = Spring.MakeTransition({});

function useCardsTransition(items) {
  return ReactSpring.useTransition(items, (function (param) {
                return Card.cardToString(param[0]);
              }), {
              from: {
                opacity: "0",
                transform: "scale(1.5)"
              },
              enter: {
                opacity: "1",
                transform: "scale(1)"
              },
              leave: {
                opacity: "0",
                transform: "scale(1.5)"
              },
              config: {
                tension: 100
              }
            });
}

function TableUI$CardsPair$attacker(Props) {
  var pair = Props.pair;
  var cards = Belt_Array.keep([pair], (function (param) {
          return Belt_Option.isSome(param[1]);
        }));
  var transitions = useCardsTransition(cards);
  return React.createElement("div", {
              className: "flex flex-col gap-3 relative"
            }, React.createElement(CardUI.make, {
                  card: pair[0],
                  className: Utils.leftRotationClassName
                }), Belt_Array.map(transitions, (function (param) {
                    var props = param.props;
                    return React.createElement(Spring.Div.make, {
                                className: "absolute left-1 top-1",
                                style: {
                                  opacity: props.opacity,
                                  transform: props.transform
                                },
                                children: React.createElement(CardUI.make, {
                                      card: Belt_Option.getWithDefault(param.item[1], /* Hidden */0),
                                      className: Utils.rightRotationClassName
                                    }),
                                key: param.key
                              });
                  })));
}

function TableUI$CardsPair$defender(Props) {
  var pair = Props.pair;
  var canDrop = Props.canDrop;
  var onDrop = Props.onDrop;
  var byCard = pair[1];
  var toCard = pair[0];
  return React.createElement("div", {
              className: "flex flex-col gap-3 relative"
            }, React.createElement(CardUI.make, {
                  card: toCard,
                  className: Utils.leftRotationClassName
                }), React.createElement("div", {
                  className: Utils.rightRotationClassName + " absolute left-1 top-1"
                }, byCard !== undefined ? React.createElement(CardUI.make, {
                        card: byCard
                      }) : React.createElement(TableUI$DndBeatableCard, {
                        card: toCard,
                        canDrop: canDrop,
                        onDrop: onDrop
                      })));
}

var CardsPair = {
  attacker: TableUI$CardsPair$attacker,
  defender: TableUI$CardsPair$defender
};

function TableUI$CardsList(Props) {
  var classNameOpt = Props.className;
  var isDefenderOpt = Props.isDefender;
  var canDropOpt = Props.canDrop;
  var table = Props.table;
  var onDrop = Props.onDrop;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var isDefender = isDefenderOpt !== undefined ? isDefenderOpt : false;
  var canDrop = canDropOpt !== undefined ? canDropOpt : (function (param) {
        return true;
      });
  var transitions = useCardsTransition(Belt_Array.reverse(Belt_List.toArray(table)));
  return React.createElement("div", {
              className: Utils.cx([
                    "flex gap-2 flex-row",
                    className
                  ])
            }, Belt_Array.map(transitions, (function (param) {
                    var props = param.props;
                    var pair = param.item;
                    return React.createElement(Spring.Div.make, {
                                style: {
                                  opacity: props.opacity,
                                  transform: props.transform
                                },
                                children: isDefender ? React.createElement(TableUI$CardsPair$defender, {
                                        pair: pair,
                                        canDrop: canDrop,
                                        onDrop: onDrop
                                      }) : React.createElement(TableUI$CardsPair$attacker, {
                                        pair: pair
                                      }),
                                key: param.key
                              });
                  })), React.createElement(CardUI.Base.make, {
                  className: "invisible"
                }));
}

var CardsList = {
  make: TableUI$CardsList
};

var DragObject$1 = {};

var EmptyDropResult$1 = {};

var CollectedProps$1 = {};

var Drop = ReactDnd.MakeUseDrop(DragObject$1, EmptyDropResult$1, CollectedProps$1);

function TableUI(Props) {
  var game = Props.game;
  var draggedCard = Props.draggedCard;
  var player = Props.player;
  var onDrop = Props.onDrop;
  var onBeat = Props.onBeat;
  var isDefender = GameUtils.isDefender(game, player);
  var draggedCard$1 = MOption.toResult(draggedCard, "No card");
  var match = ReactDnd$1.useDrop({
        accept: "card",
        drop: (function (card, param) {
            return Curry._1(onDrop, card);
          }),
        canDrop: (function (card, param) {
            return Belt_Result.isOk(Game.isValidMove(game, player, card));
          })
      }, [
        Utils.any(game),
        Utils.any(player),
        Utils.any(onDrop)
      ]);
  return React.createElement("div", {
              className: "relative"
            }, React.createElement("div", {
                  ref: match[1],
                  className: Utils.cx([
                        "absolute -mx-6 -my-8 z-[0]",
                        "h-[calc(100%+3rem)]",
                        "w-[calc(100%+3rem)]",
                        "flex flex-row bg-emerald-600 bg-opacity-40"
                      ])
                }), React.createElement(TableUI$CardsList, {
                  className: "my-1 h-16",
                  isDefender: isDefender,
                  canDrop: (function (toCard) {
                      return Belt_Result.isOk(Belt_Result.flatMap(draggedCard$1, (function (byCard) {
                                        return Game.isValidBeat(game, player, toCard, byCard);
                                      })));
                    }),
                  table: game.table,
                  onDrop: onBeat
                }));
}

var make = TableUI;

export {
  DndBeatableCard ,
  CardTransition ,
  useCardsTransition ,
  CardsPair ,
  CardsList ,
  DragObject$1 as DragObject,
  EmptyDropResult$1 as EmptyDropResult,
  CollectedProps$1 as CollectedProps,
  Drop ,
  make ,
  
}
/* include Not a pure module */
