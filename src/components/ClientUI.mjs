// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Base from "./Base.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Table from "../fool/Table.mjs";
import * as Utils from "../utils/Utils.mjs";
import * as React from "react";
import * as DeckUI from "./DeckUI.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as GameUtils from "../fool/GameUtils.mjs";

function ClientUI$Actions(Props) {
  var classNameOpt = Props.className;
  var game = Props.game;
  var player = Props.player;
  var onPass = Props.onPass;
  var onTake = Props.onTake;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var isPassDisabled = !GameUtils.isCanPass(game, player);
  var isPassed = GameUtils.isPassed(game, player.id);
  var isTakeDisabled = !GameUtils.isCanTake(game, player);
  var isDefender = GameUtils.isDefender(game, player);
  var isDuel = Belt_List.length(Belt_List.keep(game.players, (function (player) {
              return !GameUtils.isPlayerDone(game, player);
            }))) <= 2;
  return React.createElement("div", {
              className: Utils.cx([
                    "grid grid-flow-col gap-1",
                    className
                  ])
            }, isDefender ? React.createElement(Base.Button.make, {
                    disabled: isTakeDisabled,
                    onClick: onTake,
                    children: Utils.uiStr("take")
                  }) : (
                isDuel ? React.createElement(Base.Button.make, {
                        disabled: isPassDisabled,
                        onClick: onPass,
                        children: Utils.uiStr("pass")
                      }) : React.createElement(Base.Switch.make, {
                        disabled: isPassDisabled,
                        checked: isPassed,
                        onClick: onPass,
                        text: "pass"
                      })
              ));
}

var Actions = {
  make: ClientUI$Actions
};

function ClientUI(Props) {
  var classNameOpt = Props.className;
  var player = Props.player;
  var game = Props.game;
  var onDrag = Props.onDrag;
  var onMessage = Props.onMessage;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var isDefender = GameUtils.isDefender(game, player);
  var isThereCardsOnTable = Table.hasCards(game.table);
  var isPlayerCanMove = GameUtils.isPlayerCanMove(game, player);
  var isDeckEnabled = isDefender ? isThereCardsOnTable : isPlayerCanMove;
  var onMove = function (move) {
    return Curry._1(onMessage, {
                TAG: /* Progress */2,
                _0: move,
                _1: player.id,
                _2: game.gameId
              });
  };
  var match = GameUtils.getPlayerGameState(game, player);
  var tmp;
  switch (match) {
    case /* Playing */0 :
        tmp = Utils.uiStr("Playing");
        break;
    case /* Won */1 :
        tmp = Utils.uiStr("Won");
        break;
    case /* Lose */2 :
        tmp = Utils.uiStr("Lose");
        break;
    case /* Draw */3 :
        tmp = Utils.uiStr("Draw");
        break;
    
  }
  return React.createElement("div", {
              className: Utils.cx([
                    className,
                    "p-1 border rounded-md border-solid border-slate-500"
                  ])
            }, tmp, React.createElement("div", undefined, React.createElement(DeckUI.make, {
                      deck: player.cards,
                      disabled: !isDeckEnabled,
                      isDraggable: true,
                      onDrag: onDrag
                    }), React.createElement(ClientUI$Actions, {
                      className: "py-2",
                      game: game,
                      player: player,
                      onPass: (function (param) {
                          return onMove(/* Pass */1);
                        }),
                      onTake: (function (param) {
                          return onMove(/* Take */0);
                        })
                    })));
}

var make = ClientUI;

export {
  Actions ,
  make ,
  
}
/* Base Not a pure module */
