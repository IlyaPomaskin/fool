// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../fool/Card.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as CardDnd from "./CardDnd.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function suitToColor(suit) {
  switch (suit) {
    case /* Hearts */1 :
    case /* Diamonds */2 :
        return "text-red-900 dark:text-cyan-300";
    case /* Spades */0 :
    case /* Clubs */3 :
        return "text-slate-500";
    
  }
}

function CardUI$Base(Props) {
  var classNameOpt = Props.className;
  var disabledOpt = Props.disabled;
  var selectedOpt = Props.selected;
  var onClickOpt = Props.onClick;
  var children = Props.children;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var selected = selectedOpt !== undefined ? selectedOpt : false;
  var onClick = onClickOpt !== undefined ? onClickOpt : Utils.noop;
  return React.createElement("div", {
              className: Utils.cx([
                    "relative w-12 h-16",
                    "border rounded-md border-solid border-slate-500",
                    "cursor-pointer select-none",
                    disabled ? "border-slate-400" : "",
                    selected ? Utils.selected : Utils.unselected,
                    className
                  ]),
              onClick: disabled ? Utils.noop : onClick
            }, children !== undefined ? Caml_option.valFromOption(children) : null);
}

var Base = {
  make: CardUI$Base
};

function makeProps(card, classNameOpt, disabledOpt, selectedOpt, onClickOpt, param, param$1) {
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var selected = selectedOpt !== undefined ? selectedOpt : false;
  var onClick = onClickOpt !== undefined ? onClickOpt : Utils.noop;
  return {
          className: className,
          disabled: disabled,
          selected: selected,
          card: card,
          onClick: onClick
        };
}

function make(props) {
  var className = props.className;
  var disabled = props.disabled;
  var selected = props.selected;
  var card = props.card;
  var onClick = props.onClick;
  return React.createElement(CardUI$Base, {
              className: Utils.cx([
                    className,
                    disabled ? "text-slate-400" : suitToColor(card[0]),
                    "overflow-hidden"
                  ]),
              disabled: disabled,
              selected: selected,
              onClick: (function (param) {
                  return Curry._1(onClick, /* Visible */{
                              _0: card
                            });
                }),
              children: null
            }, React.createElement("div", {
                  className: "absolute w-full h-full bg-gradient-to-tl from-purple-200 to-pink-200 "
                }), React.createElement("div", {
                  className: "absolute text-[18px] leading-[18px] inset-1"
                }, Utils.uiStr(Card.suitToString(card[0]))), React.createElement("div", {
                  className: "absolute top-1/2 left-1/2 font-bold text-[18px] leading-[18px] translate-y-[-50%] translate-x-[-50%]"
                }, Utils.uiStr(Card.rankToString(card[1]))));
}

var VisibleCard = {
  makeProps: makeProps,
  make: make
};

function CardUI$HiddenCard(Props) {
  var classNameOpt = Props.className;
  var onClickOpt = Props.onClick;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var onClick = onClickOpt !== undefined ? onClickOpt : Utils.noop;
  return React.createElement(CardUI$Base, {
              className: Utils.cx([
                    className,
                    "overflow-hidden"
                  ]),
              onClick: onClick,
              children: React.createElement("div", {
                    className: "absolute w-full h-full bg-gradient-to-tl from-purple-500 to-pink-500 bg-opacity-50"
                  })
            });
}

var HiddenCard = {
  make: CardUI$HiddenCard
};

function CardUI$EmptyCard(Props) {
  var classNameOpt = Props.className;
  var onClickOpt = Props.onClick;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var onClick = onClickOpt !== undefined ? onClickOpt : Utils.noop;
  return React.createElement(CardUI$Base, {
              className: Utils.cx([
                    className,
                    "overflow-hidden"
                  ]),
              onClick: onClick
            });
}

var EmptyCard = {
  make: CardUI$EmptyCard
};

function CardUI$Local(Props) {
  var card = Props.card;
  var classNameOpt = Props.className;
  var disabledOpt = Props.disabled;
  var selectedOpt = Props.selected;
  var onClickOpt = Props.onClick;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var selected = selectedOpt !== undefined ? selectedOpt : false;
  var onClick = onClickOpt !== undefined ? onClickOpt : Utils.noop;
  if (card) {
    return React.createElement(make, makeProps(card._0, className, disabled, selected, onClick, undefined, undefined));
  } else {
    return React.createElement(CardUI$HiddenCard, {
                className: className,
                onClick: onClick
              });
  }
}

var Local = {
  make: CardUI$Local
};

function CardUI$trump(Props) {
  var suit = Props.suit;
  var classNameOpt = Props.className;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  return React.createElement("div", {
              className: Utils.cx([
                    className,
                    suitToColor(suit)
                  ])
            }, Utils.uiStr(Card.suitToString(suit)));
}

function CardUI$deck(Props) {
  var deck = Props.deck;
  var classNameOpt = Props.className;
  var disabledOpt = Props.disabled;
  var isDraggableOpt = Props.isDraggable;
  var isCardSelectedOpt = Props.isCardSelected;
  var isCardDisabledOpt = Props.isCardDisabled;
  var onCardClickOpt = Props.onCardClick;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var isDraggable = isDraggableOpt !== undefined ? isDraggableOpt : false;
  var isCardSelected = isCardSelectedOpt !== undefined ? isCardSelectedOpt : (function (param) {
        return false;
      });
  var isCardDisabled = isCardDisabledOpt !== undefined ? isCardDisabledOpt : (function (param) {
        return false;
      });
  var onCardClick = onCardClickOpt !== undefined ? onCardClickOpt : Utils.noop;
  if (deck) {
    return React.createElement("div", {
                className: Utils.cx([
                      className,
                      "leading flex gap-1"
                    ])
              }, Utils.uiListWithIndex(deck, (function (index, card) {
                      if (isDraggable) {
                        return React.createElement(CardDnd.Cards.DroppableContainer.make, {
                                    id: card,
                                    axis: /* X */0,
                                    accept: (function (param) {
                                        return false;
                                      }),
                                    children: React.createElement(CardDnd.Cards.DraggableItem.make, {
                                          id: card,
                                          containerId: card,
                                          index: index,
                                          className: (function (dragging) {
                                              return Utils.cx([
                                                          "",
                                                          ""
                                                        ]);
                                            }),
                                          children: {
                                            NAME: "Children",
                                            VAL: React.createElement(CardUI$Local, {
                                                  card: card,
                                                  disabled: disabled || Curry._1(isCardDisabled, card),
                                                  selected: Curry._1(isCardSelected, card),
                                                  onClick: onCardClick
                                                })
                                          }
                                        }),
                                    key: Card.cardToString(card) + String(index)
                                  });
                      } else {
                        return React.createElement(CardUI$Local, {
                                    card: card,
                                    className: "inline-block mx-1",
                                    disabled: disabled || Curry._1(isCardDisabled, card),
                                    selected: Curry._1(isCardSelected, card),
                                    onClick: onCardClick,
                                    key: Card.cardToString(card) + String(index)
                                  });
                      }
                    })));
  } else {
    return React.createElement("div", {
                className: className
              }, Utils.uiStr("No cards in deck"));
  }
}

function CardUI$table(Props) {
  var classNameOpt = Props.className;
  var isCardSelectedOpt = Props.isCardSelected;
  var isCardDisabledOpt = Props.isCardDisabled;
  var table = Props.table;
  var onCardClickOpt = Props.onCardClick;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var isCardSelected = isCardSelectedOpt !== undefined ? isCardSelectedOpt : (function (param) {
        return false;
      });
  var isCardDisabled = isCardDisabledOpt !== undefined ? isCardDisabledOpt : (function (param) {
        return false;
      });
  var onCardClick = onCardClickOpt !== undefined ? onCardClickOpt : Utils.noop;
  return React.createElement("div", {
              className: Utils.cx([
                    "flex gap-1 flex-col",
                    className
                  ])
            }, table ? Utils.uiList(table, (function (param) {
                      var by = param[1];
                      var to = param[0];
                      var isDisabled = Belt_Option.isSome(by) || Curry._1(isCardDisabled, to);
                      return React.createElement("div", {
                                  key: Card.cardToString(to) + Belt_Option.getWithDefault(Belt_Option.map(by, Card.cardToString), ""),
                                  className: "relative"
                                }, by !== undefined ? React.createElement("div", {
                                        className: "flex flex-col gap-1"
                                      }, React.createElement(CardUI$Local, {
                                            card: to,
                                            disabled: true
                                          }), React.createElement(CardUI$Local, {
                                            card: by,
                                            className: "absolute opacity-0.5",
                                            disabled: true
                                          })) : React.createElement("div", {
                                        className: "relative"
                                      }, React.createElement(CardUI$Local, {
                                            card: to,
                                            disabled: isDisabled,
                                            selected: Curry._1(isCardSelected, to),
                                            onClick: onCardClick
                                          }), React.createElement(CardDnd.Cards.DroppableContainer.make, {
                                            id: to,
                                            axis: /* Y */1,
                                            lockAxis: true,
                                            accept: (function (param) {
                                                return true;
                                              }),
                                            className: (function (draggingOver) {
                                                return Utils.cx([
                                                            "top-0",
                                                            "left-0",
                                                            "w-12 h-16",
                                                            draggingOver ? "bg-gradient-to-tl from-purple-200 to-pink-200 opacity-70" : ""
                                                          ]);
                                              }),
                                            children: React.createElement("div", {
                                                  className: Utils.cx([
                                                        "w-12 h-16",
                                                        "inline-block",
                                                        "transform-x-[-100%]",
                                                        "border rounded-md border-solid border-slate-500"
                                                      ])
                                                })
                                          })));
                    })) : Utils.uiStr("Table empty"));
}

var make$1 = CardUI$Local;

var trump = CardUI$trump;

var deck = CardUI$deck;

var table = CardUI$table;

export {
  suitToColor ,
  Base ,
  VisibleCard ,
  HiddenCard ,
  EmptyCard ,
  Local ,
  make$1 as make,
  trump ,
  deck ,
  table ,
  
}
/* react Not a pure module */
