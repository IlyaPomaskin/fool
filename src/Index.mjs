// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Log from "./Log.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as UseWs from "./hooks/UseWs.mjs";
import * as Utils from "./Utils.mjs";
import * as React from "react";
import * as PlayerUI from "./components/PlayerUI.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as InLobbyScreen from "./screen/InLobbyScreen.mjs";
import * as InProgressScreen from "./screen/InProgressScreen.mjs";
import * as LobbySetupScreen from "./screen/LobbySetupScreen.mjs";
import * as AuthorizationScreen from "./screen/AuthorizationScreen.mjs";
import * as ReactBeautifulDnd from "react-beautiful-dnd";

function Index$PlayerScreen(Props) {
  var match = React.useState(function () {
        
      });
  var setPlayer = match[1];
  var player = match[0];
  var match$1 = React.useState(function () {
        return /* AuthorizationScreen */0;
      });
  var setScreen = match$1[1];
  var screen = match$1[0];
  var onMessage = React.useCallback((function (message) {
          Log.logMessageFromServer(message, Belt_Option.getWithDefault(Belt_Option.map(player, (function (p) {
                          return p.id;
                        })), "no player"));
          var exit = 0;
          switch (message.TAG | 0) {
            case /* Connected */0 :
                var player$1 = message._0;
                Curry._1(setPlayer, (function (param) {
                        return player$1;
                      }));
                return Curry._1(setScreen, (function (param) {
                              return /* LobbySetupScreen */1;
                            }));
            case /* LobbyCreated */1 :
            case /* LobbyUpdated */2 :
                exit = 1;
                break;
            case /* ProgressCreated */3 :
            case /* ProgressUpdated */4 :
                exit = 2;
                break;
            case /* ServerError */5 :
                return Log.info([
                            "ServerError",
                            message._0
                          ]);
            
          }
          switch (exit) {
            case 1 :
                var game = message._0;
                return Curry._1(setScreen, (function (param) {
                              return {
                                      TAG: /* InLobbyScreen */0,
                                      _0: game
                                    };
                            }));
            case 2 :
                var game$1 = message._0;
                return Curry._1(setScreen, (function (param) {
                              return {
                                      TAG: /* InProgressScreen */1,
                                      _0: game$1
                                    };
                            }));
            
          }
        }), [player]);
  var match$2 = UseWs.hook(onMessage);
  var sendMessage = match$2.sendMessage;
  var error = match$2.error;
  React.useEffect((function () {
          
        }), [sendMessage]);
  var tmp;
  var exit = 0;
  if (typeof screen === "number") {
    if (screen === /* AuthorizationScreen */0) {
      tmp = React.createElement(AuthorizationScreen.make, {
            onMessage: sendMessage
          });
    } else if (player !== undefined) {
      tmp = React.createElement(LobbySetupScreen.make, {
            player: player,
            onMessage: sendMessage
          });
    } else {
      exit = 1;
    }
  } else if (screen.TAG === /* InLobbyScreen */0) {
    if (player !== undefined) {
      tmp = React.createElement(InLobbyScreen.make, {
            game: screen._0,
            onMessage: sendMessage,
            player: player
          });
    } else {
      exit = 1;
    }
  } else if (player !== undefined) {
    tmp = React.createElement(InProgressScreen.make, {
          game: screen._0,
          player: player,
          onMessage: sendMessage
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = React.createElement("div", undefined, Utils.uiStr("unhandled case"));
  }
  return React.createElement("div", undefined, React.createElement("div", undefined, player !== undefined ? React.createElement("div", undefined, Utils.uiStr("Player: "), React.createElement(PlayerUI.Short.make, {
                            className: "inline-block",
                            player: player
                          })) : Utils.uiStr("No player")), React.createElement("div", undefined, error !== undefined ? React.createElement("div", undefined, Utils.uiStr("error: " + error)) : React.createElement("div", undefined, Utils.uiStr("No error"))), tmp);
}

var spread2 = ((x1,x2) => ({ ...x1, ...x2 }));

var spread3 = ((x1,x2,x3) => ({ ...x1, ...x2, ...x3 }));

var reorder = ((list, startIndex, endIndex) => {
  const result = Array.from(list);
  const [removed] = result.splice(startIndex, 1);
  result.splice(endIndex, 0, removed);

  return result;
});

function Index$ReactDndTest(Props) {
  var match = React.useState(function () {
        return {
                hd: {
                  id: "item-" + "1",
                  content: "item " + "1"
                },
                tl: {
                  hd: {
                    id: "item-" + "2",
                    content: "item " + "2"
                  },
                  tl: {
                    hd: {
                      id: "item-" + "3",
                      content: "item " + "3"
                    },
                    tl: {
                      hd: {
                        id: "item-" + "4",
                        content: "item " + "4"
                      },
                      tl: {
                        hd: {
                          id: "item-" + "5",
                          content: "item " + "5"
                        },
                        tl: /* [] */0
                      }
                    }
                  }
                }
              };
      });
  var setItems = match[1];
  var items = match[0];
  var handleDragEnd = function (result, param) {
    var dest = result.destination;
    if (!(dest == null)) {
      Curry._1(setItems, (function (items) {
              return Belt_List.fromArray(reorder(Belt_List.toArray(items), result.source.index, dest.index));
            }));
    }
    
  };
  return React.createElement(ReactBeautifulDnd.DragDropContext, {
              onDragEnd: handleDragEnd,
              children: React.createElement(ReactBeautifulDnd.Droppable, {
                    droppableId: "droppable",
                    children: (function (droppableProvided, droppableSnapshot) {
                        return React.createElement("div", {
                                    ref: droppableProvided.innerRef,
                                    style: {
                                      background: droppableSnapshot.isDraggingOver ? "lightblue" : "grey",
                                      padding: "8px",
                                      width: "250px"
                                    }
                                  }, Utils.uiListWithIndex(items, (function (index, item) {
                                          return React.createElement(ReactBeautifulDnd.Draggable, {
                                                      draggableId: item.id,
                                                      index: index,
                                                      children: (function (dp, draggableSnapshot, param) {
                                                          return React.cloneElement(React.createElement("div", undefined, Utils.uiStr(item.id)), spread2(spread3({
                                                                              ref: dp.innerRef
                                                                            }, dp.draggableProps, dp.dragHandleProps), {
                                                                          style: Object.assign({}, {
                                                                                background: draggableSnapshot.isDragging ? "lightgreen" : "red",
                                                                                margin: "0 0 16px 0",
                                                                                padding: "16px",
                                                                                userSelect: "none"
                                                                              }, dp.draggableProps.style)
                                                                        }));
                                                        }),
                                                      key: item.id
                                                    });
                                        })), droppableProvided.placeholder);
                      })
                  })
            });
}

function $$default(param) {
  return React.createElement("div", {
              className: "flex flex-col"
            }, React.createElement(Index$ReactDndTest, {}), React.createElement("div", {
                  className: "border rounded-md border-solid border-slate-500"
                }, React.createElement(Index$PlayerScreen, {
                      pId: "session:p1"
                    })), React.createElement("div", {
                  className: "border rounded-md border-solid border-slate-500"
                }, React.createElement(Index$PlayerScreen, {
                      pId: "session:p2"
                    })));
}

export {
  $$default ,
  $$default as default,
  
}
/* UseWs Not a pure module */
