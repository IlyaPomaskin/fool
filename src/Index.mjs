// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Log from "./Log.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as UseWs from "./hooks/UseWs.mjs";
import * as Utils from "./Utils.mjs";
import * as React from "react";
import * as PlayerUI from "./components/PlayerUI.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as InLobbyScreen from "./components/InLobbyScreen.mjs";
import * as InProgressScreen from "./components/InProgressScreen.mjs";
import * as LobbySetupScreen from "./components/LobbySetupScreen.mjs";
import * as AuthorizationScreen from "./components/AuthorizationScreen.mjs";

function Index$PlayerScreen(Props) {
  var pId = Props.pId;
  var match = React.useState(function () {
        
      });
  var setPlayer = match[1];
  var player = match[0];
  var match$1 = React.useState(function () {
        return /* AuthorizationScreen */0;
      });
  var setScreen = match$1[1];
  var screen = match$1[0];
  var onMessage = React.useCallback((function (message) {
          Log.logMessageFromServer(message, Belt_Option.getWithDefault(Belt_Option.map(player, (function (p) {
                          return p.id;
                        })), "no player"));
          var exit = 0;
          switch (message.TAG | 0) {
            case /* Connected */0 :
                var player$1 = message._0;
                Curry._1(setPlayer, (function (param) {
                        return player$1;
                      }));
                return Curry._1(setScreen, (function (param) {
                              return /* LobbySetupScreen */1;
                            }));
            case /* LobbyCreated */1 :
            case /* LobbyUpdated */2 :
                exit = 1;
                break;
            case /* ProgressCreated */3 :
            case /* ProgressUpdated */4 :
                exit = 2;
                break;
            case /* ServerError */5 :
                return Log.info([
                            "ServerError",
                            message._0
                          ]);
            
          }
          switch (exit) {
            case 1 :
                var game = message._0;
                return Curry._1(setScreen, (function (param) {
                              return {
                                      TAG: /* InLobbyScreen */0,
                                      _0: game
                                    };
                            }));
            case 2 :
                var game$1 = message._0;
                return Curry._1(setScreen, (function (param) {
                              return {
                                      TAG: /* InProgressScreen */1,
                                      _0: game$1
                                    };
                            }));
            
          }
        }), [player]);
  var match$2 = UseWs.hook(onMessage);
  var sendMessage = match$2.sendMessage;
  var error = match$2.error;
  React.useEffect((function () {
          var delayM = function (param, param$1, param$2) {
            var timeout = param$1 !== undefined ? param$1 : 100;
            return new Promise((function (resolve, param$3) {
                          setTimeout((function (param$4) {
                                  return resolve(Curry._1(sendMessage, param));
                                }), timeout);
                          
                        }));
          };
          if (pId === "session:p1") {
            delayM({
                          TAG: /* Login */1,
                          _0: pId
                        }, undefined, undefined).then(function (param) {
                        return delayM({
                                    TAG: /* Lobby */3,
                                    _0: /* Create */0,
                                    _1: "p1",
                                    _2: ""
                                  }, 100, undefined);
                      }).then(function (param) {
                      return delayM({
                                  TAG: /* Lobby */3,
                                  _0: /* Enter */1,
                                  _1: "p1",
                                  _2: "g1"
                                }, 100, undefined);
                    }).then(function (param) {
                    return delayM({
                                TAG: /* Lobby */3,
                                _0: /* Ready */2,
                                _1: "p1",
                                _2: "g1"
                              }, 100, undefined);
                  }).then(function (param) {
                  return delayM({
                              TAG: /* Lobby */3,
                              _0: /* Start */3,
                              _1: "p1",
                              _2: "g1"
                            }, 300, undefined);
                });
          }
          if (pId === "session:p2") {
            delayM({
                      TAG: /* Login */1,
                      _0: pId
                    }, undefined, undefined).then(function (param) {
                    return delayM({
                                TAG: /* Lobby */3,
                                _0: /* Enter */1,
                                _1: "p2",
                                _2: "g1"
                              }, 250, undefined);
                  }).then(function (param) {
                  return delayM({
                              TAG: /* Lobby */3,
                              _0: /* Ready */2,
                              _1: "p2",
                              _2: "g1"
                            }, 100, undefined);
                });
          }
          
        }), [sendMessage]);
  var tmp;
  var exit = 0;
  if (typeof screen === "number") {
    if (screen === /* AuthorizationScreen */0) {
      tmp = React.createElement(AuthorizationScreen.make, {
            onMessage: sendMessage
          });
    } else if (player !== undefined) {
      tmp = React.createElement(LobbySetupScreen.make, {
            player: player,
            onMessage: sendMessage
          });
    } else {
      exit = 1;
    }
  } else if (screen.TAG === /* InLobbyScreen */0) {
    if (player !== undefined) {
      tmp = React.createElement(InLobbyScreen.make, {
            game: screen._0,
            onMessage: sendMessage,
            player: player
          });
    } else {
      exit = 1;
    }
  } else if (player !== undefined) {
    tmp = React.createElement(InProgressScreen.make, {
          game: screen._0,
          player: player,
          onMessage: sendMessage
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = React.createElement("div", undefined, Utils.uiStr("unhandled case"));
  }
  return React.createElement("div", undefined, React.createElement("div", undefined, player !== undefined ? React.createElement("div", undefined, Utils.uiStr("Player: "), React.createElement(PlayerUI.Short.make, {
                            className: "inline-block",
                            player: player
                          })) : Utils.uiStr("No player")), React.createElement("div", undefined, error !== undefined ? React.createElement("div", undefined, Utils.uiStr("error: " + error)) : React.createElement("div", undefined, Utils.uiStr("No error"))), tmp);
}

function $$default(param) {
  return React.createElement("div", {
              className: "flex flex-col"
            }, React.createElement("div", {
                  className: "border rounded-md border-solid border-slate-500"
                }, React.createElement(Index$PlayerScreen, {
                      pId: "session:p1"
                    })), React.createElement("div", {
                  className: "border rounded-md border-solid border-slate-500"
                }, React.createElement(Index$PlayerScreen, {
                      pId: "session:p2"
                    })));
}

export {
  $$default ,
  $$default as default,
  
}
/* UseWs Not a pure module */
