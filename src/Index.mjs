// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Game from "./fool/Game.mjs";
import * as Jzon from "rescript-jzon/src/Jzon.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "./Utils.mjs";
import * as React from "react";
import * as GameUI from "./components/GameUI.mjs";
import * as Player from "./fool/Player.mjs";
import * as ClientUI from "./components/ClientUI.mjs";
import * as Serializer from "./Serializer.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Webapi__WebSocket from "rescript-webapi/src/Webapi/Webapi__WebSocket.mjs";

function Index$Client(Props) {
  var game = Props.game;
  var playerId = Props.playerId;
  var ws = React.useMemo(function () {
        return new WebSocket("ws://localhost:3001/ws");
      });
  var match = React.useState(function () {
        
      });
  var player = match[0];
  React.useEffect(function () {
        ws.addEventListener("open", (function (param) {
                console.log("open");
                ws.send(Serializer.serializeClientMessage({
                          TAG: /* Player */0,
                          _0: /* Connect */0,
                          _1: playerId
                        }));
                
              }));
        ws.addEventListener("message", (function ($$event) {
                console.log("message", $$event);
                var msg = Webapi__WebSocket.messageAsText($$event);
                var msg$1 = msg !== undefined ? Serializer.deserializeServerMessage(msg) : ({
                      TAG: /* Error */1,
                      _0: {
                        NAME: "SyntaxError",
                        VAL: "Message can't be parsed as json"
                      }
                    });
                console.log("received msg:", msg$1);
                var tmp;
                tmp = msg$1.TAG === /* Ok */0 ? (
                    msg$1._0.TAG === /* Connected */0 ? "" : "unhandled gMsg"
                  ) : "received msg error: " + Jzon.DecodingError.toString(msg$1._0);
                console.log("received msg dispatch:", tmp);
                
              }));
        ws.addEventListener("close", (function (param) {
                console.log("close");
                ws.send(Serializer.serializeClientMessage({
                          TAG: /* Player */0,
                          _0: /* Disconnect */1,
                          _1: playerId
                        }));
                
              }));
        ws.addEventListener("error", (function ($$event) {
                console.log("error", $$event);
                
              }));
        return (function (param) {
                  ws.close();
                  
                });
      });
  var match$1 = React.useState(function () {
        
      });
  var setError = match$1[1];
  var handleMove = function (move) {
    var nextGame = Belt_Result.map(Utils.toResult(player, "No player"), (function (player) {
            return Game.dispatch(game, player, move);
          }));
    if (nextGame.TAG === /* Ok */0) {
      Curry._1(setError, (function (param) {
              
            }));
      return Curry._1(setError, (function (param) {
                    
                  }));
    }
    var err = nextGame._0;
    return Curry._1(setError, (function (param) {
                  return err;
                }));
  };
  return React.createElement("div", undefined, React.createElement(GameUI.InProgressUI.make, {
                  game: game
                }), React.createElement("div", {
                  className: "flex flex-wrap"
                }, Utils.uiList(game.players, (function (player) {
                        return React.createElement(ClientUI.make, {
                                    className: "m-1 flex-initial w-96",
                                    player: player,
                                    game: game,
                                    onMove: handleMove,
                                    key: player.id
                                  });
                      }))), React.createElement("div", undefined, Utils.uiStr(Belt_Option.getWithDefault(Belt_Option.map(match$1[0], (function (err) {
                                return "Error: " + err;
                              })), "No errors"))));
}

function $$default(param) {
  var state = React.useMemo(function () {
        var author = Player.make("owner");
        var client = Player.make("user2");
        var players_1 = {
          hd: client,
          tl: /* [] */0
        };
        var players = {
          hd: author,
          tl: players_1
        };
        return {
                game: Game.startGame({
                      gameId: "GAME_ID",
                      players: players,
                      ready: players
                    }),
                author: author,
                client: client
              };
      });
  var game = state.game;
  var tmp;
  tmp = game.TAG === /* Ok */0 ? React.createElement(Index$Client, {
          game: game._0,
          playerId: "alice"
        }) : Utils.uiStr(game._0);
  var tmp$1;
  tmp$1 = game.TAG === /* Ok */0 ? React.createElement(Index$Client, {
          game: game._0,
          playerId: "bob"
        }) : Utils.uiStr(game._0);
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "my-2 border rounded-md border-solid border-slate-500"
                }, tmp), React.createElement("div", {
                  className: "my-2 border rounded-md border-solid border-slate-500"
                }, tmp$1));
}

export {
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
