// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Base from "./components/Base.mjs";
import * as Game from "./fool/Game.mjs";
import * as Jzon from "rescript-jzon/src/Jzon.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "./Utils.mjs";
import * as React from "react";
import * as GameUI from "./components/GameUI.mjs";
import * as ClientUI from "./components/ClientUI.mjs";
import * as Serializer from "./Serializer.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Webapi__WebSocket from "rescript-webapi/src/Webapi/Webapi__WebSocket.mjs";

function Index$Client(Props) {
  var playerId = Props.playerId;
  var ws = React.useMemo(function () {
        return new WebSocket("ws://localhost:3001/ws");
      });
  var match = React.useState(function () {
        
      });
  var setPlayer = match[1];
  var player = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setInLobby = match$1[1];
  var match$2 = React.useState(function () {
        
      });
  var setInProgress = match$2[1];
  var inProgress = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setError = match$3[1];
  React.useEffect((function () {
          ws.addEventListener("open", (function (param) {
                  console.log("open", playerId);
                  ws.send(Serializer.serializeClientMessage({
                            TAG: /* Player */0,
                            _0: /* Connect */0,
                            _1: playerId
                          }));
                  
                }));
          ws.addEventListener("message", (function ($$event) {
                  console.log("message", playerId, $$event);
                  var msg = Webapi__WebSocket.messageAsText($$event);
                  var msg$1 = msg !== undefined ? Serializer.deserializeServerMessage(msg) : ({
                        TAG: /* Error */1,
                        _0: {
                          NAME: "SyntaxError",
                          VAL: "Message can't be parsed as json"
                        }
                      });
                  console.log("received msg:", playerId, msg$1);
                  var tmp;
                  if (msg$1.TAG === /* Ok */0) {
                    var player = msg$1._0;
                    switch (player.TAG | 0) {
                      case /* Connected */0 :
                          var player$1 = player._0;
                          tmp = "Connected: " + player$1.id + " " + Belt_Option.getWithDefault(player$1.sessionId, "no sesid");
                          break;
                      case /* LobbyCreated */1 :
                          tmp = "LobbyCreated: " + player._0.gameId;
                          break;
                      case /* LobbyUpdated */2 :
                          tmp = "LobbyUpdated: " + player._0.gameId;
                          break;
                      case /* ProgressCreated */3 :
                          tmp = "ProgressCreated: " + player._0.gameId;
                          break;
                      case /* ProgressUpdated */4 :
                          tmp = "ProgressUpdated: " + player._0.gameId;
                          break;
                      case /* Err */5 :
                          tmp = "unk";
                          break;
                      
                    }
                  } else {
                    tmp = "unk";
                  }
                  console.log("msg:", tmp);
                  if (msg$1.TAG === /* Ok */0) {
                    var gMsg = msg$1._0;
                    switch (gMsg.TAG | 0) {
                      case /* Connected */0 :
                          var player$2 = gMsg._0;
                          Curry._1(setPlayer, (function (param) {
                                  return player$2;
                                }));
                          if (playerId === "alice") {
                            ws.send(Serializer.serializeClientMessage({
                                      TAG: /* Lobby */1,
                                      _0: /* Create */0,
                                      _1: playerId,
                                      _2: ""
                                    }));
                          } else {
                            ws.send(Serializer.serializeClientMessage({
                                      TAG: /* Lobby */1,
                                      _0: /* Enter */1,
                                      _1: playerId,
                                      _2: "gameId"
                                    }));
                          }
                          return ;
                      case /* LobbyCreated */1 :
                          var inLobby = gMsg._0;
                          Curry._1(setInLobby, (function (param) {
                                  return inLobby;
                                }));
                          ws.send(Serializer.serializeClientMessage({
                                    TAG: /* Lobby */1,
                                    _0: /* Enter */1,
                                    _1: playerId,
                                    _2: inLobby.gameId
                                  }));
                          return ;
                      case /* LobbyUpdated */2 :
                          var inLobby$1 = gMsg._0;
                          Curry._1(setInLobby, (function (param) {
                                  return inLobby$1;
                                }));
                          ws.send(Serializer.serializeClientMessage({
                                    TAG: /* Lobby */1,
                                    _0: /* Enter */1,
                                    _1: playerId,
                                    _2: inLobby$1.gameId
                                  }));
                          return ;
                      case /* ProgressCreated */3 :
                          var inProgress = gMsg._0;
                          Curry._1(setInProgress, (function (param) {
                                  return inProgress;
                                }));
                          ws.send(Serializer.serializeClientMessage({
                                    TAG: /* Lobby */1,
                                    _0: /* Enter */1,
                                    _1: playerId,
                                    _2: inProgress.gameId
                                  }));
                          return ;
                      case /* ProgressUpdated */4 :
                          var inProgress$1 = gMsg._0;
                          return Curry._1(setInProgress, (function (param) {
                                        return inProgress$1;
                                      }));
                      case /* Err */5 :
                          var msg$2 = gMsg._0;
                          return Curry._1(setError, (function (param) {
                                        return msg$2;
                                      }));
                      
                    }
                  } else {
                    console.log("received msg error: " + Jzon.DecodingError.toString(msg$1._0));
                    return ;
                  }
                }));
          ws.addEventListener("close", (function (param) {
                  console.log("close", playerId);
                  ws.send(Serializer.serializeClientMessage({
                            TAG: /* Player */0,
                            _0: /* Disconnect */1,
                            _1: playerId
                          }));
                  
                }));
          ws.addEventListener("error", (function ($$event) {
                  console.log("error", playerId, $$event);
                  
                }));
          return (function (param) {
                    ws.close();
                    
                  });
        }), []);
  var match$4 = React.useState(function () {
        
      });
  var setError$1 = match$4[1];
  var handleMove = function (move) {
    var game = Belt_Option.getExn(inProgress);
    var nextGame = Belt_Result.map(Utils.toResult(player, "No player"), (function (player) {
            return Game.dispatch(game, player, move);
          }));
    if (nextGame.TAG === /* Ok */0) {
      ws.send(Serializer.serializeClientMessage({
                TAG: /* Progress */2,
                _0: move,
                _1: playerId,
                _2: game.gameId
              }));
      return Curry._1(setError$1, (function (param) {
                    
                  }));
    }
    var err = nextGame._0;
    return Curry._1(setError$1, (function (param) {
                  return err;
                }));
  };
  if (match$1[0] !== undefined) {
    return React.createElement("div", undefined, Utils.uiStr("inLobby"));
  } else if (inProgress !== undefined) {
    return React.createElement("div", undefined, React.createElement(Base.Button.make, {
                    children: Utils.uiStr("connect")
                  }), React.createElement(GameUI.InProgressUI.make, {
                    game: inProgress
                  }), React.createElement("div", {
                    className: "flex flex-wrap"
                  }, Utils.uiList(inProgress.players, (function (player) {
                          return React.createElement(ClientUI.make, {
                                      className: "m-1 flex-initial w-96",
                                      player: player,
                                      game: inProgress,
                                      onMove: handleMove,
                                      key: player.id
                                    });
                        }))), React.createElement("div", undefined, Utils.uiStr(Belt_Option.getWithDefault(Belt_Option.map(match$4[0], (function (err) {
                                  return "Error: " + err;
                                })), "No errors"))));
  } else {
    return React.createElement("div", undefined, Utils.uiStr("err"));
  }
}

function $$default(param) {
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "my-2 border rounded-md border-solid border-slate-500"
                }, React.createElement(Index$Client, {
                      playerId: "alice"
                    })), React.createElement("div", {
                  className: "my-2 border rounded-md border-solid border-slate-500"
                }, React.createElement(Index$Client, {
                      playerId: "bob"
                    })));
}

export {
  $$default ,
  $$default as default,
  
}
/* Base Not a pure module */
