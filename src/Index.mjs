// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Base from "./components/Base.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as UseWs from "./hooks/UseWs.mjs";
import * as Utils from "./Utils.mjs";
import * as React from "react";
import * as GameUI from "./components/GameUI.mjs";
import * as LobbyUI from "./components/LobbyUI.mjs";
import * as ClientUI from "./components/ClientUI.mjs";

function Index$AuthorizationUI(Props) {
  var onMessage = Props.onMessage;
  React.useEffect((function () {
          var sessionId = localStorage.getItem("sessionId");
          if (!(sessionId == null)) {
            Curry._1(onMessage, {
                  TAG: /* Login */1,
                  _0: sessionId
                });
          }
          
        }), []);
  var match = React.useState(function () {
        return "";
      });
  var setLogin = match[1];
  var login = match[0];
  return React.createElement("div", undefined, React.createElement("input", {
                  value: login,
                  onChange: (function (e) {
                      return Curry._1(setLogin, (function (param) {
                                    return e.target.value;
                                  }));
                    })
                }), React.createElement(Base.Button.make, {
                  onClick: (function (param) {
                      return Curry._1(onMessage, {
                                  TAG: /* Register */0,
                                  _0: login
                                });
                    }),
                  children: Utils.uiStr("Create user")
                }));
}

function Index$LobbySetupScreen(Props) {
  var playerId = Props.playerId;
  return React.createElement("div", undefined, Utils.uiStr("lobby setup " + playerId));
}

function Index$PlayerScreen(Props) {
  var match = React.useState(function () {
        
      });
  var setPlayer = match[1];
  var player = match[0];
  var match$1 = React.useState(function () {
        return /* AuthorizationScreen */0;
      });
  var setScreen = match$1[1];
  var screen = match$1[0];
  var onMessage = React.useCallback((function (message) {
          var exit = 0;
          switch (message.TAG | 0) {
            case /* Connected */0 :
                var player$1 = message._0;
                Curry._1(setPlayer, (function (param) {
                        return player$1;
                      }));
                Curry._1(setScreen, (function (param) {
                        return {
                                TAG: /* LobbySetupScreen */0,
                                _0: player$1.id
                              };
                      }));
                localStorage.setItem("sessionId", player$1.sessionId);
                return ;
            case /* LobbyCreated */1 :
            case /* LobbyUpdated */2 :
                exit = 1;
                break;
            case /* ProgressCreated */3 :
            case /* ProgressUpdated */4 :
                exit = 2;
                break;
            case /* ServerError */5 :
                return ;
            
          }
          switch (exit) {
            case 1 :
                if (player === undefined) {
                  return ;
                }
                var game = message._0;
                return Curry._1(setScreen, (function (param) {
                              return {
                                      TAG: /* InLobbyScreen */1,
                                      _0: game,
                                      _1: player.id
                                    };
                            }));
            case 2 :
                if (player === undefined) {
                  return ;
                }
                var game$1 = message._0;
                return Curry._1(setScreen, (function (param) {
                              return {
                                      TAG: /* InProgressScreen */2,
                                      _0: game$1,
                                      _1: player.id
                                    };
                            }));
            
          }
        }), []);
  var match$2 = UseWs.hook(onMessage);
  var sendMessage = match$2.sendMessage;
  var error = match$2.error;
  if (typeof screen === "number") {
    return React.createElement(Index$AuthorizationUI, {
                onMessage: sendMessage
              });
  }
  switch (screen.TAG | 0) {
    case /* LobbySetupScreen */0 :
        return React.createElement(Index$LobbySetupScreen, {
                    playerId: screen._0
                  });
    case /* InLobbyScreen */1 :
        return React.createElement(LobbyUI.make, {
                    game: screen._0,
                    onMessage: sendMessage,
                    playerId: screen._1
                  });
    case /* InProgressScreen */2 :
        var playerId = screen._1;
        var game = screen._0;
        return React.createElement("div", undefined, React.createElement("div", undefined, error !== undefined ? React.createElement("div", undefined, Utils.uiStr("error: " + error)) : React.createElement("div", undefined, Utils.uiStr("No error"))), React.createElement(GameUI.InProgressUI.make, {
                        game: game
                      }), React.createElement("div", {
                        className: "flex flex-wrap"
                      }, Utils.uiList(game.players, (function (player) {
                              return React.createElement(ClientUI.make, {
                                          className: "m-1 flex-initial w-96",
                                          player: player,
                                          isOwner: player.id === playerId,
                                          game: game,
                                          onMove: (function (move) {
                                              return Curry._1(sendMessage, {
                                                          TAG: /* Progress */4,
                                                          _0: move,
                                                          _1: playerId,
                                                          _2: game.gameId
                                                        });
                                            }),
                                          key: player.id
                                        });
                            }))));
    
  }
}

function $$default(param) {
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "my-2 w-1/2 inline-block border rounded-md border-solid border-slate-500"
                }, React.createElement(Index$PlayerScreen, {})), React.createElement("div", {
                  className: "my-2 w-1/2 inline-block border rounded-md border-solid border-slate-500"
                }, React.createElement(Index$PlayerScreen, {})));
}

export {
  $$default ,
  $$default as default,
  
}
/* Base Not a pure module */
