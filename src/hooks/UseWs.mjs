// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Log from "../Log.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as Serializer from "../Serializer.mjs";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Webapi__WebSocket from "rescript-webapi/src/Webapi/Webapi__WebSocket.mjs";

function hook(playerId) {
  var match = React.useState(function () {
        
      });
  var setPlayer = match[1];
  var match$1 = React.useState(function () {
        
      });
  var setInLobby = match$1[1];
  var match$2 = React.useState(function () {
        
      });
  var setInProgress = match$2[1];
  var match$3 = React.useState(function () {
        
      });
  var setError = match$3[1];
  var ws = React.useMemo((function () {
          return new WebSocket("ws://localhost:3001/ws");
        }), []);
  var sendMessage = React.useCallback((function (message) {
          ws.send(Serializer.serializeClientMessage(message));
          
        }), [ws]);
  React.useEffect((function () {
          ws.addEventListener("message", (function ($$event) {
                  Belt_Result.map(Utils.tapResult(Belt_Result.flatMap(Utils.toResult(Webapi__WebSocket.messageAsText($$event), {
                                    NAME: "SyntaxError",
                                    VAL: "Message from server cannot be parsed as text"
                                  }), Serializer.deserializeServerMessage), (function (message) {
                              return Log.logMessageFromServer(message, playerId);
                            })), (function (message) {
                          if (message.TAG === /* ServerError */6) {
                            var msg = message._0;
                            Curry._1(setError, (function (param) {
                                    return msg;
                                  }));
                          } else {
                            Curry._1(setError, (function (param) {
                                    
                                  }));
                          }
                          var exit = 0;
                          switch (message.TAG | 0) {
                            case /* Connected */0 :
                                var player = message._0;
                                return Curry._1(setPlayer, (function (param) {
                                              return player;
                                            }));
                            case /* LobbyCreated */1 :
                            case /* LobbyUpdated */2 :
                                exit = 1;
                                break;
                            case /* LobbyClosed */3 :
                                return Curry._1(setInLobby, (function (param) {
                                              
                                            }));
                            case /* ProgressCreated */4 :
                            case /* ProgressUpdated */5 :
                                exit = 2;
                                break;
                            case /* ServerError */6 :
                                return ;
                            
                          }
                          switch (exit) {
                            case 1 :
                                var inLobby = message._0;
                                return Curry._1(setInLobby, (function (param) {
                                              return inLobby;
                                            }));
                            case 2 :
                                var inProgress = message._0;
                                return Curry._1(setInProgress, (function (param) {
                                              return inProgress;
                                            }));
                            
                          }
                        }));
                  
                }));
          ws.addEventListener("close", (function (param) {
                  return Curry._1(sendMessage, {
                              TAG: /* Player */2,
                              _0: /* Disconnect */0,
                              _1: playerId
                            });
                }));
          ws.addEventListener("error", (function (param) {
                  return Log.error([
                              "socket error for player",
                              playerId
                            ]);
                }));
          return (function (param) {
                    ws.close();
                    
                  });
        }), []);
  return {
          player: match[0],
          inLobby: match$1[0],
          inProgress: match$2[0],
          error: match$3[0],
          sendMessage: sendMessage
        };
}

export {
  hook ,
  
}
/* react Not a pure module */
