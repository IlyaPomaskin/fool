// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Log from "../Log.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as $$WebSocket from "../bindings/WebSocket.mjs";
import * as Serializer from "../Serializer.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";

function hook(onMessage, player, onConnect) {
  var match = React.useState(function () {
        
      });
  var setError = match[1];
  var sessionId = Belt_Option.getWithDefault(Belt_Option.map(player, (function (player) {
              return player.sessionId;
            })), "");
  var match$1 = React.useMemo((function () {
          if (sessionId === "") {
            return [
                    undefined,
                    Utils.noop
                  ];
          }
          var ws = new WebSocket("ws://localhost:3001/ws?sessionId=" + sessionId);
          var sendMessage = function (message) {
            if ($$WebSocket.isOpen(ws)) {
              Log.logMessageFromClient(message);
              ws.send(Serializer.serializeClientMessage(message));
              return ;
            } else {
              return Log.error([
                          "Not connected",
                          Log.clientMsgToString(message)
                        ]);
            }
          };
          ws.addEventListener("close", (function ($$event) {
                  console.log("close", $$event);
                  
                }));
          ws.addEventListener("error", (function ($$event) {
                  console.log("error", $$event);
                  
                }));
          ws.addEventListener("open", (function ($$event) {
                  console.log("open", $$event);
                  return Curry._1(onConnect, sendMessage);
                }));
          return [
                  ws,
                  sendMessage
                ];
        }), [sessionId]);
  var ws = match$1[0];
  React.useEffect((function () {
          var handleMessage = function ($$event) {
            Belt_Result.map(Belt_Result.flatMap(Utils.toResult($$WebSocket.messageAsText($$event), {
                          NAME: "SyntaxError",
                          VAL: "Message from server cannot be parsed as text"
                        }), Serializer.deserializeServerMessage), (function (message) {
                    if (message.TAG === /* ServerError */5) {
                      var msg = message._0;
                      Curry._1(setError, (function (param) {
                              return msg;
                            }));
                    } else {
                      Curry._1(setError, (function (param) {
                              
                            }));
                    }
                    return Curry._1(onMessage, message);
                  }));
            
          };
          if (ws !== undefined) {
            ws.addEventListener("message", handleMessage);
            return (function (param) {
                      ws.removeEventListener("message", handleMessage);
                      
                    });
          }
          
        }), [
        ws,
        onMessage
      ]);
  return {
          error: match[0],
          sendMessage: match$1[1]
        };
}

export {
  hook ,
  
}
/* react Not a pure module */
