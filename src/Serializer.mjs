// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jzon from "rescript-jzon/src/Jzon.mjs";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function suitToString(suit) {
  switch (suit) {
    case /* Spades */0 :
        return "S";
    case /* Hearts */1 :
        return "H";
    case /* Diamonds */2 :
        return "D";
    case /* Clubs */3 :
        return "C";
    
  }
}

function stringToSuit(str) {
  switch (str) {
    case "C" :
        return /* Clubs */3;
    case "D" :
        return /* Diamonds */2;
    case "H" :
        return /* Hearts */1;
    case "S" :
        return /* Spades */0;
    default:
      return ;
  }
}

function rankToString(rank) {
  switch (rank) {
    case /* Six */0 :
        return "6";
    case /* Seven */1 :
        return "7";
    case /* Eight */2 :
        return "8";
    case /* Nine */3 :
        return "9";
    case /* Ten */4 :
        return "10";
    case /* Jack */5 :
        return "J";
    case /* Queen */6 :
        return "Q";
    case /* King */7 :
        return "K";
    case /* Ace */8 :
        return "A";
    
  }
}

function stringToRank(str) {
  switch (str) {
    case "10" :
        return /* Ten */4;
    case "6" :
        return /* Six */0;
    case "7" :
        return /* Seven */1;
    case "8" :
        return /* Eight */2;
    case "9" :
        return /* Nine */3;
    case "A" :
        return /* Ace */8;
    case "J" :
        return /* Jack */5;
    case "K" :
        return /* King */7;
    case "Q" :
        return /* Queen */6;
    default:
      return ;
  }
}

function cardToString(card) {
  if (!card) {
    return "hidden";
  }
  var match = card._0;
  return suitToString(match[0]) + rankToString(match[1]);
}

function stringToCard(str) {
  if (str === "hidden") {
    return {
            TAG: /* Ok */0,
            _0: /* Hidden */0
          };
  }
  var suit = stringToSuit(str.slice(0, 1));
  var rank = stringToRank(str.slice(1, 3));
  if (suit !== undefined) {
    if (rank !== undefined) {
      return {
              TAG: /* Ok */0,
              _0: /* Visible */{
                _0: [
                  suit,
                  rank
                ]
              }
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: {
                NAME: "UnexpectedJsonValue",
                VAL: [
                  [{
                      TAG: /* Field */0,
                      _0: "rank"
                    }],
                  str
                ]
              }
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: {
              NAME: "UnexpectedJsonValue",
              VAL: [
                [{
                    TAG: /* Field */0,
                    _0: "suit"
                  }],
                str
              ]
            }
          };
  }
}

var card = Jzon.custom(cardToString, (function (json) {
        return stringToCard(Belt_Option.getWithDefault(Js_json.decodeString(json), ""));
      }));

var suit = Jzon.custom(suitToString, (function (json) {
        var suit = Belt_Option.flatMap(Js_json.decodeString(json), stringToSuit);
        if (suit !== undefined) {
          return {
                  TAG: /* Ok */0,
                  _0: suit
                };
        } else {
          return {
                  TAG: /* Error */1,
                  _0: {
                    NAME: "UnexpectedJsonValue",
                    VAL: [
                      [{
                          TAG: /* Field */0,
                          _0: "suit"
                        }],
                      "s"
                    ]
                  }
                };
        }
      }));

var tablePair = Jzon.object2((function (param) {
        return [
                param[0],
                param[1]
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: [
                  param[0],
                  param[1]
                ]
              };
      }), Jzon.field("to", card), Jzon.optional(Jzon.field("by", card)));

var playerMsg = Jzon.object1((function (kind) {
        switch (kind) {
          case /* Connect */0 :
              return "connect";
          case /* Disconnect */1 :
              return "disconnect";
          case /* Ping */2 :
              return "ping";
          case /* Pong */3 :
              return "pong";
          
        }
      }), (function (kind) {
        switch (kind) {
          case "Pong" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Pong */3
                    };
          case "connect" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Connect */0
                    };
          case "disconnect" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Disconnect */1
                    };
          case "ping" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Ping */2
                    };
          default:
            return {
                    TAG: /* Error */1,
                    _0: {
                      NAME: "UnexpectedJsonValue",
                      VAL: [
                        [{
                            TAG: /* Field */0,
                            _0: "kind"
                          }],
                        kind
                      ]
                    }
                  };
        }
      }), Jzon.field("kind", Jzon.string));

var lobbyMsg = Jzon.object1((function (kind) {
        switch (kind) {
          case /* Create */0 :
              return "create";
          case /* Enter */1 :
              return "enter";
          case /* Ready */2 :
              return "ready";
          case /* Start */3 :
              return "start";
          
        }
      }), (function (kind) {
        switch (kind) {
          case "create" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Create */0
                    };
          case "enter" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Enter */1
                    };
          case "ready" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Ready */2
                    };
          case "start" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Start */3
                    };
          default:
            return {
                    TAG: /* Error */1,
                    _0: {
                      NAME: "UnexpectedJsonValue",
                      VAL: [
                        [{
                            TAG: /* Field */0,
                            _0: "kind"
                          }],
                        kind
                      ]
                    }
                  };
        }
      }), Jzon.field("kind", Jzon.string));

var beatPayload = Jzon.object2((function (param) {
        return [
                param.to,
                param.by
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  to: param[0],
                  by: param[1]
                }
              };
      }), Jzon.field("to", card), Jzon.field("by", card));

var movePayload = Jzon.object1((function (param) {
        return param.card;
      }), (function (card) {
        return {
                TAG: /* Ok */0,
                _0: {
                  card: card
                }
              };
      }), Jzon.field("card", card));

var progressMsg = Jzon.object2((function (kind) {
        if (typeof kind === "number") {
          if (kind === /* Take */0) {
            return [
                    "take",
                    undefined
                  ];
          } else {
            return [
                    "pass",
                    undefined
                  ];
          }
        } else if (kind.TAG === /* Beat */0) {
          return [
                  "beat",
                  Caml_option.some(Jzon.encodeWith({
                            to: kind._0,
                            by: kind._1
                          }, beatPayload))
                ];
        } else {
          return [
                  "move",
                  Caml_option.some(Jzon.encodeWith({
                            card: kind._0
                          }, movePayload))
                ];
        }
      }), (function (param) {
        var payload = param[1];
        var kind = param[0];
        switch (kind) {
          case "beat" :
              if (payload !== undefined) {
                return Belt_Result.map(Jzon.decodeWith(Caml_option.valFromOption(payload), beatPayload), (function (param) {
                              return {
                                      TAG: /* Beat */0,
                                      _0: param.to,
                                      _1: param.by
                                    };
                            }));
              }
              break;
          case "move" :
              if (payload !== undefined) {
                return Belt_Result.map(Jzon.decodeWith(Caml_option.valFromOption(payload), movePayload), (function (param) {
                              return {
                                      TAG: /* Move */1,
                                      _0: param.card
                                    };
                            }));
              }
              break;
          case "pass" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Pass */1
                    };
          case "take" :
              return {
                      TAG: /* Ok */0,
                      _0: /* Take */0
                    };
          default:
            
        }
        return {
                TAG: /* Error */1,
                _0: {
                  NAME: "UnexpectedJsonValue",
                  VAL: [
                    [{
                        TAG: /* Field */0,
                        _0: "kind"
                      }],
                    kind
                  ]
                }
              };
      }), Jzon.field("kind", Jzon.string), Jzon.optional(Jzon.field("payload", Jzon.json)));

var gameMsg = Jzon.object4((function (kind) {
        switch (kind.TAG | 0) {
          case /* Player */0 :
              return [
                      "player",
                      Jzon.encodeWith(kind._0, playerMsg),
                      kind._1,
                      undefined
                    ];
          case /* Lobby */1 :
              return [
                      "lobby",
                      Jzon.encodeWith(kind._0, lobbyMsg),
                      kind._1,
                      kind._2
                    ];
          case /* Progress */2 :
              return [
                      "progress",
                      Jzon.encodeWith(kind._0, progressMsg),
                      kind._1,
                      kind._2
                    ];
          
        }
      }), (function (param) {
        var gameId = param[3];
        var playerId = param[2];
        var msg = param[1];
        var kind = param[0];
        switch (kind) {
          case "lobby" :
              if (gameId !== undefined) {
                return Belt_Result.map(Jzon.decodeWith(msg, lobbyMsg), (function (msg) {
                              return {
                                      TAG: /* Lobby */1,
                                      _0: msg,
                                      _1: playerId,
                                      _2: gameId
                                    };
                            }));
              }
              break;
          case "player" :
              return Belt_Result.map(Jzon.decodeWith(msg, playerMsg), (function (msg) {
                            return {
                                    TAG: /* Player */0,
                                    _0: msg,
                                    _1: playerId
                                  };
                          }));
          case "progress" :
              if (gameId !== undefined) {
                return Belt_Result.map(Jzon.decodeWith(msg, progressMsg), (function (msg) {
                              return {
                                      TAG: /* Progress */2,
                                      _0: msg,
                                      _1: playerId,
                                      _2: gameId
                                    };
                            }));
              }
              break;
          default:
            
        }
        return {
                TAG: /* Error */1,
                _0: {
                  NAME: "UnexpectedJsonValue",
                  VAL: [
                    [{
                        TAG: /* Field */0,
                        _0: "kind"
                      }],
                    kind
                  ]
                }
              };
      }), Jzon.field("kind", Jzon.string), Jzon.field("payload", Jzon.json), Jzon.field("playerId", Jzon.string), Jzon.optional(Jzon.field("gameId", Jzon.string)));

function serializeClientMessage(msg) {
  return Jzon.encodeStringWith(msg, gameMsg);
}

function deserializeClientMessage(msg) {
  return Jzon.decodeStringWith(msg, gameMsg);
}

function listViaArray(elementCodec) {
  return Jzon.custom((function (list) {
                return Jzon.encodeWith(Belt_List.toArray(list), Jzon.array(elementCodec));
              }), (function (json) {
                return Belt_Result.map(Jzon.decodeWith(json, Jzon.array(elementCodec)), Belt_List.fromArray);
              }));
}

var playerMsg$1 = Jzon.object3((function (param) {
        return [
                param.id,
                param.sessionId,
                param.cards
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  id: param[0],
                  sessionId: param[1],
                  cards: param[2]
                }
              };
      }), Jzon.field("id", Jzon.string), Jzon.optional(Jzon.field("sessionId", Jzon.string)), Jzon.field("cards", listViaArray(card)));

var inLobbyMsg = Jzon.object3((function (param) {
        return [
                param.gameId,
                param.players,
                param.ready
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  gameId: param[0],
                  players: param[1],
                  ready: param[2]
                }
              };
      }), Jzon.field("gameId", Jzon.string), Jzon.field("players", listViaArray(playerMsg$1)), Jzon.field("ready", listViaArray(playerMsg$1)));

var tableCards = listViaArray(tablePair);

var inProgressMsg = Jzon.object8((function (param) {
        return [
                param.gameId,
                param.attacker,
                param.defender,
                param.players,
                param.trump,
                param.deck,
                param.table,
                param.pass
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  gameId: param[0],
                  attacker: param[1],
                  defender: param[2],
                  players: param[3],
                  trump: param[4],
                  deck: param[5],
                  table: param[6],
                  pass: param[7]
                }
              };
      }), Jzon.field("gameId", Jzon.string), Jzon.field("attacker", playerMsg$1), Jzon.field("defender", playerMsg$1), Jzon.field("players", listViaArray(playerMsg$1)), Jzon.field("trump", suit), Jzon.field("deck", listViaArray(card)), Jzon.field("table", tableCards), Jzon.field("pass", listViaArray(playerMsg$1)));

var serverGameMsg = Jzon.object2((function (kind) {
        switch (kind.TAG | 0) {
          case /* Connected */0 :
              return [
                      "connected",
                      Jzon.encodeWith(kind._0, playerMsg$1)
                    ];
          case /* LobbyCreated */1 :
              return [
                      "lobbyCreated",
                      Jzon.encodeWith(kind._0, inLobbyMsg)
                    ];
          case /* LobbyUpdated */2 :
              return [
                      "lobbyUpdated",
                      Jzon.encodeWith(kind._0, inLobbyMsg)
                    ];
          case /* ProgressCreated */3 :
              return [
                      "progressCreated",
                      Jzon.encodeWith(kind._0, inProgressMsg)
                    ];
          case /* ProgressUpdated */4 :
              return [
                      "progressUpdated",
                      Jzon.encodeWith(kind._0, inProgressMsg)
                    ];
          case /* ServerError */5 :
              return [
                      "error",
                      Jzon.encodeWith(kind._0, Jzon.string)
                    ];
          
        }
      }), (function (param) {
        var payload = param[1];
        var kind = param[0];
        switch (kind) {
          case "connected" :
              return Belt_Result.map(Jzon.decodeWith(payload, playerMsg$1), (function (player) {
                            return {
                                    TAG: /* Connected */0,
                                    _0: player
                                  };
                          }));
          case "error" :
              return Belt_Result.map(Jzon.decodeWith(payload, Jzon.string), (function (msg) {
                            return {
                                    TAG: /* ServerError */5,
                                    _0: msg
                                  };
                          }));
          case "lobbyCreated" :
              return Belt_Result.map(Jzon.decodeWith(payload, inLobbyMsg), (function (game) {
                            return {
                                    TAG: /* LobbyCreated */1,
                                    _0: game
                                  };
                          }));
          case "lobbyUpdated" :
              return Belt_Result.map(Jzon.decodeWith(payload, inLobbyMsg), (function (game) {
                            return {
                                    TAG: /* LobbyUpdated */2,
                                    _0: game
                                  };
                          }));
          case "progressCreated" :
              return Belt_Result.map(Jzon.decodeWith(payload, inProgressMsg), (function (game) {
                            return {
                                    TAG: /* ProgressCreated */3,
                                    _0: game
                                  };
                          }));
          case "progressUpdated" :
              return Belt_Result.map(Jzon.decodeWith(payload, inProgressMsg), (function (game) {
                            return {
                                    TAG: /* ProgressUpdated */4,
                                    _0: game
                                  };
                          }));
          default:
            return {
                    TAG: /* Error */1,
                    _0: {
                      NAME: "UnexpectedJsonValue",
                      VAL: [
                        [{
                            TAG: /* Field */0,
                            _0: "kind"
                          }],
                        kind
                      ]
                    }
                  };
        }
      }), Jzon.field("kind", Jzon.string), Jzon.field("payload", Jzon.json));

function serializeServerMessage(msg) {
  return Jzon.encodeStringWith(msg, serverGameMsg);
}

function deserializeServerMessage(msg) {
  return Jzon.decodeStringWith(msg, serverGameMsg);
}

export {
  suitToString ,
  stringToSuit ,
  rankToString ,
  stringToRank ,
  cardToString ,
  stringToCard ,
  card ,
  suit ,
  tablePair ,
  lobbyMsg ,
  beatPayload ,
  movePayload ,
  progressMsg ,
  gameMsg ,
  serializeClientMessage ,
  deserializeClientMessage ,
  listViaArray ,
  playerMsg$1 as playerMsg,
  inLobbyMsg ,
  tableCards ,
  inProgressMsg ,
  serverGameMsg ,
  serializeServerMessage ,
  deserializeServerMessage ,
  
}
/* card Not a pure module */
